var xluerzer = (function() {
	var instance = null;
	return new function() {

		this.getPath = function(){
			return "/xgo/xplugs/xluerzer";
		}

		this.getInstance = function(config) {
			if (instance == null) {
				instance = new xluerzer_(config);
			}
			return instance;
		}
	}
})();

var xluerzer_ = function(config) {
	this.config = config || {};
};

xluerzer_.prototype = {

	getAjaxPath : function(suffix)
	{
		return '/xgo/xplugs/xluerzer/ajax/'+suffix;
	},

	defaultSearcher: function(cfg) {

		var fields = [
		{name: cfg.pid,	text:'ID',	type:'int', width: 50}
		];


		Ext.each(cfg.fields,function(item){

			if (Ext.isObject(item)) {

				switch(item.type)
				{
					case 'image':
					item.type = "string";
					break;
					default:
					item.type = "string";
				}

				if (typeof item.flex == 'undefined')
				{
					item.flex = 1;
				}

				fields.push(item);
			} else {
				//fields.push({name: item, text: item,	type: 'string'});
			}

		},this);

		var scopex 	= cfg.scopex;
		var gui 	= xframe_pattern.getInstance().genGrid({
			region:'center',
			forceFit:true,
			border:false,
			title: 'Overview '+ cfg.text,
			split: true,
			collapseMode: 'mini',
			button_del:true,
			button_add:true,
			search: true,
			editor: true,
			pager: true,
			xstore: {

				load: 	this.getAjaxPath(scopex+'/load'),
				update: this.getAjaxPath(scopex+'/update'),
				insert: this.getAjaxPath(scopex+'/insert'),
				move: 	this.getAjaxPath(scopex+'/move'),
				remove:	this.getAjaxPath(scopex+'/remove'),
				pid: 	cfg.pid,

				fields: fields
			},
			listeners: {
				scope: this,
				buffer: 1,
				itemdblclick: function(g,record) {
					this.openDefault_oeRecord(record, scopex);
				},

			}
		});


		gui.on('afterrender',function(){
			scope: this,
			gui.getStore().load({
				callback: function(records, operation, success) {
					// color change depending on status (jquery)
					$$('.pending').closest('tr').find('td').each (function() {
						$$(this).addClass('pendingClass');
					});

					$$('.draft').closest('tr').find('td').each (function() {
						$$(this).addClass('draftClass');
					});

				}
			});

		},this);

		return gui;
	},


	openDefault_oeRecord: function(record, scopex)
	{

		switch (scopex) {

			case 'oe_blogposts':
			this.showBlogpost(record.data.oebp_id);
			return;
			break;
			
			case 'oe_inspiration':
			this.showInspiration(record.data.oei_id);
			return;
			break;
		
			case 'oe_events':
			this.showEvents(record.data.oee_id);
			return;
			break;
			
			case 'oe_partners':
			this.showPartners(record.data.oep_id);
			return;
			break;
			
			case 'oe_designerprofiles':
			this.showDesignerprofiles(record.data.oedp_id);
			return;
			break;
			
			case 'oe_thisweek':
			this.showThisweek(record.data.oetw_id);
			return;
			break;
			
			case 'oe_interviews':
			this.showInterview(record.data.oein_id);
			return;
			break;
			
			case 'oe_otherarticle':
			this.showOtherarticle(record.data.oeoa_id);
			return;
			break;
			
			case 'oe_magazines':
			this.newMagazine(record.data.oeoa_id);
			return;
			break;
			
			default:
			return false;
		}

	},


	showContent: function(gui) {

		gui.closable = true;
		this.masterTab.add(gui).show();

		/* this.wb.removeAll();
		this.wb.add(gui);
		this.wb.doLayout(); */
	},

	defaultAction: function(cfg) {
		var ret = {
			iconCls: '',
			text: cfg.text,
			handler: function() {
				this.showContent(this.defaultSearcher(cfg));
			},
			scope: this
		}

		return ret;
	},

	imgRendererOe_120x40: function(value) {
		if ((value !== 'undefined') && (value != 0)) {
			return "<img width=120 src='/xgo/xplugs/xluerzer/ajax/media/oe_120x40/"+value+"'>";
		}
		else {
			return "";
			return "<img width=120 src='/xgo/xplugs/xluerzer/ajax/media/oe_120x40/default.png'>";
		}
	},


	imgRendererSubmissionIcon: function(value) {
		if ((value !== 'undefined') && (value != 0)) {
			return "<img width=120 src='/xgo/xplugs/xluerzer/ajax/media/oe_120x40/"+value+"'>";
		}
		else {
			return "";
			return "<img width=120 src='/xgo/xplugs/xluerzer/ajax/media/oe_120x40/default.png'>";
		}
	},

	imgRendererSubmissionSmall: function(value) {
		// return "<img height=80 src='/xgo/xplugs/xluerzer/ajax/e_submissionCrazyImage/?file="+value+".jpg&size=small'>";
		return "<img height=80 src='/xgo/xplugs/xluerzer/ajax/e_submission_media/img/"+value+"/small'>";
	},

	submissionStateRender: function(value) {
		switch(''+value)
		{
			case '1': return "submitted";
			case '2': return "waiting for credits";
			case '3': return "not selected";
			case '4': return "preselected";
			case '5': return "selected";
			case '6': return "technicol error/no image";
			case '7': return "<span class='pending'>pending review</span>";
			case '8': return "<span class='draft'>withdrawn</span>";
			default: return "unkown";
		}
	},
	
	stateRender: function(value) {
		switch(''+value)
		{
			case '1': return "<span class='published'>published</span>";
			case '2': return "<span class='pending'>pending review</span>";
			case '3': return "<span class='draft'>draft</span>";
			default: return "unkown";
		}
	},

	featuredRender: function(value) {
		switch(''+value)
		{
			case '1': return "yes";
			case '0': return "no";
			default: return "unkown";
		}
	},

	highResRender: function(value) {
		switch(''+value)
		{
			case '0': return "no";
			default: return "yes";
		}
	},

	showCreditForm: function() {

		var fields =  [
		{name:'welcherIcon', 			type: 'string'},
		{name:'welcherText',	 		type: 'string'},
		{name:'value',			 		type: 'string'},
		];

		var gui = xframe_pattern.getInstance().genGrid({
			region:'center',
			border:false,
			collapseMode: 'mini',
			tbar: false,

			xstore: {
				load: 	this.getAjaxPath('e_submissionOfTheDayX/load?dayx=2014-01-08'),
				pid: 	'SubmissionID',
				fields: fields
			},

			listeners: {
				scope: this,
				buffer: 1,
			},

			columns: [

				{
					text: 'Icon',
					maxWidth: 75,
					dataIndex: 'SubmissionID'
				},
	
				{
					text: 'Type',
					dataIndex: 'type',
					flex: 1
				},
	
				{
					text: 'Value',
					dataIndex: 'value',
					flex: 2
				},

			],

		});

		gui.on('afterrender',function(){
			gui.getStore().load();
		},this);

		return gui;
	},

	showInspiration: function(id) {
		
			var me = this;

			var panel_settings = Ext.widget({
				xtype: 'form',
				border: false,
				region: 'west',
				title: 'Settings',
				width: 200,
				collapsible: true,
				collapseDirection : 'left',
				margin: '0',
				split: true,
				cls: 'settings',
				autoScroll: true,
				fieldDefaults: {
					labelAlign: 'top',
					msgTarget: 'side',
					padding: 0
				},
				items: [
				
					this.setStateField({
						name: 'oei_state'
					}),
			
					this.publishStartField({
						name: 'oei_date_start'
					}),
					
					this.publishEndField({
						name: 'oei_date_end'
					}),

					this.chooseImageField({
						name: 'oei_media_id'
					})
					
				]
			});
			
			
			var panel_content 	= Ext.create('Ext.form.Panel', {
				title: 'Content',
				border: false,
				region: 'center',
				cls: 'innen-content',
				xtype: 'form',
				autoScroll: true,
	
				fieldDefaults: {
					labelAlign: 'top',
					msgTarget: 'side',
					padding: 0
				},
	
				items: [
					
					{
					
					xtype: 'fieldcontainer',
					layout: 'hbox',
					width: '100%',
					forceFit: true,
					defaultType: 'textfield',
		
					items: [
		
						{
						xtype: 'container',
						flex: 3,
							items: [
								{
									xtype: 'textfield',
									name: 'oei_title',
									fieldLabel: 'Title',
									width: '100%',
									height: 40
								},
								
								{
									xtype: 'textareafield',
									fieldLabel: 'Short description',
									name: 'oei_desc_short',
									height: 175,
									width: '100%'
								},
							]
						},
						
						{
							xtype: 'splitter',
							width: 20,
						},
						{
							xtype: 'textareafield',
							fieldLabel: 'Keywords',
							name: 'oei_keywords',
							flex: 1,
							height: 220
						}
		
					]
					},
									
	
					this.setLinkField({
						name: 'oei_url'
					})				
					
				]
			});
			

			var gui = Ext.create('Ext.form.Panel', {
				border: false,
				title: 'Edit Inspiration - ID: '+id,
				tbar: this.getTbarSub(),
				layout: 'border',
				tbar: [
				{
					text: 'Save',
					iconCls: 'xf_save',
					scope: this,
					handler: function() {
						var values = panel_settings.getForm().getValues();
						Ext.apply(values, panel_content.getForm().getValues());
						saveData(values);
					}
				}],
				
				fieldDefaults: {
					labelAlign: 'top',
					msgTarget: 'side',
					autoScroll: true,
				},

				items: [panel_settings, panel_content]
			});
			
			
			loadData = function()
			{
				console.info("id", id)
				gui.mask('Loading Data ...');
				xframe.ajax({
					scope: me,
					url: me.getAjaxPath('oe_inspiration_details/load/'+id),
					params : {
					},
					stateless: function(success, json)
					{
						gui.unmask();
						if (!success) return;
	
						panel_settings.getForm().setValues(json);
						panel_content.getForm().setValues(json);
					}
				});
			}
			
			saveData = function(values)
			{
				console.info(values);
				gui.mask('Saving Data ...');
				xframe.ajax({
					scope: me,
					type: 'post',
					jsonData: values,
					url: me.getAjaxPath('oe_inspiration_details/save/'+id),
					params : {
						
					},
					stateless: function(success, json)
					{
						gui.unmask();
						if (!success) return;
	
						panel_settings.getForm().setValues(json);
						panel_content.getForm().setValues(json);
					}
				});
			}
	
			gui.on('afterrender',function(){
				loadData();
			},this,{buffer:1});
	
			this.showContent(gui);
	},


	showBlogpost: function(id) {

		var me 		= this;
		var columns = [
		{ text: 'Image',  		dataIndex: 'thumb'},
		{ text: 'Filename',  	dataIndex: 'name' },
		{ text: 'Title',  		dataIndex: 'title'},
		{ text: 'Description',  dataIndex: 'description'},
		{ text: 'Uploaded', 	dataIndex: 'uploaded' },
		{ text: 'Size', 		dataIndex: 'size' },
		{ text: 'Size', 		dataIndex: 'del' }
		];

		var tpanel_gallery = xframe_pattern.getInstance().genGrid({
			title: 'Media Manager',
			forceFit: true,
			border: false,
			split: true,
			collapseMode: 'mini',
			button_del: true,
			button_add: true,
			search: true,
			pager: true,
			xstore: {

				pid: 	'as_id',

				load: 	this.getAjaxPath('oe_mediamanager/load'),
				remove: this.getAjaxPath('oe_mediamanager/remove'),
				update: this.getAjaxPath('oe_mediamanager/update'),
				insert: this.getAjaxPath('oe_mediamanager/insert'),
				move: 	this.getAjaxPath('oe_mediamanager/move'),

				params: {
				},

				fields: [
				{name:'image',			text:'Image', 			type: 'string'},
				{name:'title',			text:'Title', 			type: 'string'},
				{name:'description',	text:'Description', 	type: 'string'},
				{name:'alt',			text:'Alt', 			type: 'string'},
				{name:'uploaded',		text:'Uploaded', 		type: 'date'},
				{name:'size',			text:'Size', 			type: 'float'}
				],

			},
			listeners: {
				scope: this,
				buffer: 1,
				itemdblclick: function(g,record) {

				}
			}
		});

		tpanel_gallery.on('afterrender',function(){
		},this);

		var panel_settings = Ext.widget({
			xtype: 'form',
			border: false,
			region: 'west',
			title: 'Settings',
			width: 200,
			collapsible: true,
			collapseDirection : 'left',
			margin: '0',
			split: true,
			cls: 'settings',
			autoScroll: true,
			fieldDefaults: {
				labelAlign: 'top',
				msgTarget: 'side',
				padding: 0
			},
			items: [

			this.setStateField({
				name: 'oebp_state'
			}),
			this.simplyCombo({
				fieldLabel: 'Featured Post',
				name: 'oebp_featured',
				data: [{k:'0',v:'No'},{k:'1',v:'Yes'}]
			}),
			this.publishStartField({
				name: 'oebp_date_start'
			}),
			this.publishEndField({
				name: 'oebp_date_end'
			}),
			this.chooseImageField({
				name: 'oebp_media_id'
			}),
			
			this.chooseImageField({
				fieldLabel: 'Blog Overview', 
				name: 'oebp_img_promo_id'
			}),
			
			this.chooseImageField({
				fieldLabel: 'Blog Featured', 
				name: 'oebp_img_promo_single_id'
			})
			]
		});

		var tpanel_seo = {
			title: 'SEO',
			html: 'seo'
		};
		
		var tpanel_log = {
			title: 'Log',
			html: 'log'
		};

		var tpanel_content 	= Ext.create('Ext.form.Panel', {
			title: 'Post',
			border: false,
			cls: 'innen-content',
			xtype: 'form',
			autoScroll: true,

			fieldDefaults: {
				labelAlign: 'top',
				msgTarget: 'side',
				padding: 0
			},

			items: [
			
			{
					
				xtype: 'fieldcontainer',
				layout: 'hbox',
				width: '100%',
				forceFit: true,
				defaultType: 'textfield',
	
				items: [
	
					{
					xtype: 'container',
					flex: 3,
						items: [
							{
								xtype: 'textfield',
								name: 'oebp_title',
								fieldLabel: 'Title',
								width: '100%',
								height: 40
							},
							
							{
								xtype: 'textareafield',
								fieldLabel: 'Short description',
								name: 'oebp_desc_short',
								height: 175,
								width: '100%'
							},
						]
					},
					
					{
						xtype: 'splitter',
						width: 20,
					},
					{
						xtype: 'textareafield',
						fieldLabel: 'Keywords',
						name: 'oebp_keywords',
						flex: 1,
						height: 220
					}
	
				]
			},
			
			{
				xtype: 'fieldcontainer',
				layout: 'column',
				width: '100%',
				items: [{
					xtype:'xr_field_html',
					columnWidth: 0.5,
					fieldLabel: 'Left',
					name: 'oebp_col_left',
				},{
					xtype: 'splitter',
					width:20
				},{
					xtype:'xr_field_html',
					columnWidth: 0.5,
					fieldLabel: 'Right',
					name: 'oebp_col_right'
				}]
			}]
		});


		var tpanel_preview = {
			title: 'Preview',
			html: 'preview'
		};

		var panel_content = {
			tbar: [{
				text: 'Save',
				iconCls: 'xf_save',
				scope: this,
				handler: function() {
					var values = panel_settings.getForm().getValues();
					Ext.apply(values, tpanel_content.getForm().getValues());
					saveData(values);
				}
			}],
			xtype: 'tabpanel',
			region: 'center',
			border: false,
			cls: 'content',
			items: [tpanel_content,tpanel_gallery,tpanel_preview,tpanel_seo,tpanel_log]
		};

		var gui = Ext.create('Ext.panel.Panel', {
			border: false,
			title: 'Edit Editor\'s Blog - ID: '+id,
			//tbar: this.getTbarSub(),
			layout: 'border',
			fieldDefaults: {
				labelAlign: 'top',
				msgTarget: 'side',
				autoScroll: true,
			},

			items: [panel_settings,panel_content]
		});


		loadData = function()
		{
			gui.mask('Loading Data ...');
			xframe.ajax({
				scope: me,
				url: me.getAjaxPath('oe_blogposts_details/load/'+id),
				params : {
				},
				stateless: function(success, json)
				{
					gui.unmask();
					if (!success) return;

					panel_settings.getForm().setValues(json);
					tpanel_content.getForm().setValues(json);
				}
			});
		},
		
		saveData = function(values)
		{
			console.info(values);
			gui.mask('Saving Data ...');
			xframe.ajax({
				scope: me,
				type: 'post',
				jsonData: values,
				url: me.getAjaxPath('oe_blogposts_details/save/'+id),
				params : {
					
				},
				stateless: function(success, json)
				{
					gui.unmask();
					if (!success) return;

					panel_settings.getForm().setValues(json);
					tpanel_content.getForm().setValues(json);
				}
			});
		},
	
		gui.on('afterrender',function(){
			loadData();
		},this,{buffer:1});

		this.showContent(gui);
	},
	

	showEvents: function(id) {
		
		var me = this;
		
		var panel_settings = Ext.widget({
				xtype: 'form',
				border: false,
				region: 'west',
				title: 'Settings',
				width: 200,
				collapsible: true,
				collapseDirection : 'left',
				margin: '0',
				split: true,
				cls: 'settings',
				autoScroll: true,
				fieldDefaults: {
					labelAlign: 'top',
					msgTarget: 'side',
					padding: 0
				},
				items: [
				
					this.setStateField({
						name: 'oee_state'
					}),
			
					{
						xtype: 'datefield',
						emptyText: 'Pick date ...',
						fieldLabel: 'From date',
						name: 'oee_date_from',
					},

					{
						xtype: 'datefield',
						emptyText: 'Pick date ...',
						fieldLabel: 'To date',
						name: 'oee_date_to',
					},

					this.chooseImageField({
						name: 'oee_media_id'
					})
				
					
				]
			});
			
			
			var panel_content 	= Ext.create('Ext.form.Panel', {
				title: 'Content',
				border: false,
				region: 'center',
				cls: 'innen-content',
				xtype: 'form',
				autoScroll: true,
	
				fieldDefaults: {
					labelAlign: 'top',
					msgTarget: 'side',
					padding: 0
				},
	
				items: [
					
					{
					
					xtype: 'fieldcontainer',
					layout: 'hbox',
					width: '100%',
					forceFit: true,
					defaultType: 'textfield',
		
					items: [
		
						{
						xtype: 'container',
						flex: 3,
							items: [
								{
									xtype: 'textfield',
									name: 'oee_title',
									fieldLabel: 'Title',
									width: '100%',
									height: 40
								},
								
								{
									xtype: 'textareafield',
									fieldLabel: 'Short description',
									name: 'oee_desc_short',
									height: 175,
									width: '100%'
								},
							]
						},
						
						{
							xtype: 'splitter',
							width: 20,
						},
						{
							xtype: 'textareafield',
							fieldLabel: 'Keywords',
							name: 'oee_keywords',
							flex: 1,
							height: 220
						}
		
					]
					},
						
					
					this.longDescriptionField({
						name: 'oee_desc_long'
					}),
					
					this.setLinkField({
						name: 'oee_url'
					}),	
			
				]
			});
			

			var gui = Ext.create('Ext.form.Panel', {
				border: false,
				title: 'Edit Event - ID: '+id,
				layout: 'border',
				tbar: [{
					text: 'Save',
					iconCls: 'xf_save',
					scope: this,
					handler: function() {
						var values = panel_settings.getForm().getValues();
						Ext.apply(values, panel_content.getForm().getValues());
						saveData(values);
					}
				}],
				
				fieldDefaults: {
					labelAlign: 'top',
					msgTarget: 'side',
					autoScroll: true,
				},
				
				items: [panel_settings, panel_content]
			});
			
			
			loadData = function()
			{
				console.info("id", id)
				gui.mask('Loading Data ...');
				xframe.ajax({
					scope: me,
					url: me.getAjaxPath('oe_events_details/load/'+id),
					params : {
					},
					stateless: function(success, json)
					{
						gui.unmask();
						if (!success) return;
	
						panel_settings.getForm().setValues(json);
						panel_content.getForm().setValues(json);
					}
				});
			}
			
			saveData = function(values)
			{
				gui.mask('Saving Data ...');
				xframe.ajax({
					scope: me,
					type: 'post',
					jsonData: values,
					url: me.getAjaxPath('oe_events_details/save/'+id),
					params : {
					},
					stateless: function(success, json)
					{
						gui.unmask();
						if (!success);
	
						panel_settings.getForm().setValues(json);
						panel_content.getForm().setValues(json);
					}
				});
			},
	
			gui.on('afterrender',function(){
				loadData();
			},this,{buffer:1});
	
			this.showContent(gui);
	},


	showPartners: function(id) {
		
		var me = this;
		
		var panel_settings = Ext.widget({
				xtype: 'form',
				border: false,
				region: 'west',
				title: 'Settings',
				width: 200,
				collapsible: true,
				collapseDirection : 'left',
				margin: '0',
				split: true,
				cls: 'settings',
				autoScroll: true,
				fieldDefaults: {
					labelAlign: 'top',
					msgTarget: 'side',
					padding: 0
				},
				
				items: [
				
					this.setStateField({
						name: 'oep_state'
					}),
			
					this.publishStartField({
						name: 'oep_date_start'
					}),
					
					this.publishEndField({
						name: 'oep_date_end'
					}),

					this.chooseImageField({
						name: 'oep_media_id'
					})
					
				]
			});
			
			
			var panel_content 	= Ext.create('Ext.form.Panel', {
				title: 'Content',
				border: false,
				region: 'center',				
				cls: 'innen-content',
				xtype: 'form',
				autoScroll: true,
				
	
				fieldDefaults: {
					labelAlign: 'top',
					msgTarget: 'side',
					padding: 0
				},
	
				items: [
					
					{
					
					xtype: 'fieldcontainer',
					layout: 'hbox',
					width: '100%',
					forceFit: true,
					defaultType: 'textfield',
		
					items: [
		
						{
						xtype: 'container',
						flex: 3,
							items: [
								{
									xtype: 'textfield',
									name: 'oep_title',
									fieldLabel: 'Title',
									width: '100%',
									height: 40
								},
								
								{
									xtype: 'textareafield',
									fieldLabel: 'Short description',
									name: 'oep_desc_short',
									height: 175,
									width: '100%'
								},
							]
						},
						
						{
							xtype: 'splitter',
							width: 20,
						},
						{
							xtype: 'textareafield',
							fieldLabel: 'Keywords',
							name: 'oep_keywords',
							flex: 1,
							height: 220
						}
		
					]
					},
					
					this.longDescriptionField({
						name: 'oep_desc_long'
					}),
					
					this.setLinkField({
						name: 'oep_url'
					})
					
			
				]
			});
			

			var gui = Ext.create('Ext.form.Panel', {
				border: false,
				title: 'Edit Partner - ID: '+id,
				layout: 'border',
				tbar: [{
					text: 'Save',
					iconCls: 'xf_save',
					scope: this,
					handler: function() {
						var values = panel_settings.getForm().getValues();
						Ext.apply(values, panel_content.getForm().getValues());
						saveData(values);
					}
				}],
				
				fieldDefaults: {
					labelAlign: 'top',
					msgTarget: 'side',
					autoScroll: true,
				},

				items: [panel_settings, panel_content]
			});
			
			
			loadData = function()
			{
				console.info("id", id)
				gui.mask('Loading Data ...');
				xframe.ajax({
					scope: me,
					url: me.getAjaxPath('oe_partners_details/load/'+id),
					params : {
					},
					stateless: function(success, json)
					{
						gui.unmask();
						if (!success) return;
	
						panel_settings.getForm().setValues(json);
						panel_content.getForm().setValues(json);
					}
				});
			},
			
			saveData = function(values)
			{
				gui.mask('Saving Data ...');
				xframe.ajax({
					scope: me,
					type: 'post',
					jsonData: values,
					url: me.getAjaxPath('oe_partners_details/save/'+id),
					params : {
					},
					stateless: function(success, json)
					{
						gui.unmask();
						if (!success);
	
						panel_settings.getForm().setValues(json);
						panel_content.getForm().setValues(json);
					}
				});
			},
	
			gui.on('afterrender',function(){
				loadData();
			},this,{buffer:1});
	
			this.showContent(gui);
			
	},


	showThisweek: function(id) {
		
			var me = this;
		
			var panel_settings = Ext.widget({
				xtype: 'form',
				border: false,
				region: 'west',
				title: 'Settings',
				width: 200,
				collapsible: true,
				collapseDirection : 'left',
				margin: '0',
				split: true,
				cls: 'settings',
				autoScroll: true,
				fieldDefaults: {
					labelAlign: 'top',
					msgTarget: 'side',
					padding: 0
				},
				items: [
				
					this.setStateField({
						name: 'oetw_state'
					}),
			
					{
						xtype: 'datefield',
						fieldLabel: 'Day',
						name: 'oetw_day',
					},

					this.chooseImageField({
						name: 'oetw_media_id'
					})
		
				]
			});
				
			var panel_content 	= Ext.create('Ext.form.Panel', {
				title: 'Content',
				border: false,
				region: 'center',
				cls: 'innen-content',
				xtype: 'form',
				autoScroll: true,
	
				fieldDefaults: {
					labelAlign: 'top',
					msgTarget: 'side',
					padding: 0
				},
	
				items: [
					
					this.titleField({
						name: 'oetw_title', 
						name_keywords: 'oetw_keywords'
					}),
		
					{
						xtype:'xr_field_html',
						fieldLabel: 'Short description',
						name: 'oetw_desc_short',
						height: 160,
					},
	
					this.html2Field({
						name_left: 'oetw_col_left',
						name_right: 'oetw_col_right'
					}),
			
				]
			});
			
			var gui = Ext.create('Ext.form.Panel', {
				border: false,
				title: 'Edit this Week - ID: '+id,
				
				tbar: [
				{
					text: 'Save',
					iconCls: 'xf_save',
					handler: function() {
						var values = panel_settings.getForm().getValues();
						Ext.apply(values, panel_content.getForm().getValues());
						saveData(values);
					},
				}/*,
		
				{
					text: 'Close',
					iconCls: 'xf_abort',
					handler: function() {
						console.info("close: ");
					},
				}*/
				],
				
				layout: 'border',
				
				fieldDefaults: {
					labelAlign: 'top',
					msgTarget: 'side',
					autoScroll: true,
				},

				items: [panel_settings, panel_content]
			});
			
		
			loadData = function()
			{
				console.info("id", id)
				gui.mask('Loading Data ...');
				xframe.ajax({
					scope: me,
					url: me.getAjaxPath('oe_thisweek_details/load/'+id),
					params : {
					},
					stateless: function(success, json)
					{
						gui.unmask();
						if (!success) return;
	
						panel_settings.getForm().setValues(json);
						panel_content.getForm().setValues(json);
					}
				});
			},
			
		
			saveData = function(values)
			{
				gui.mask('Saving Data ...');
				xframe.ajax({
					scope: me,
					type: 'post',
					jsonData: values,
					url: me.getAjaxPath('oe_thisweek_details/save/'+id),
					params : {
					},
					stateless: function(success, json)
					{
						gui.unmask();
						if (!success);
	
						panel_settings.getForm().setValues(json);
						panel_content.getForm().setValues(json);
					}
				});
			},
	
	
			gui.on('afterrender',function(){
				loadData();
			},this,{buffer:1});
	
	
			this.showContent(gui);	
	},


	showDesignerprofiles: function(id) {
		
			var me = this;
			
			var panel_settings = Ext.widget({
				xtype: 'form',
				border: false,
				region: 'west',
				title: 'Settings',
				width: 200,
				collapsible: true,
				collapseDirection : 'left',
				margin: '0',
				split: true,
				cls: 'settings',
				autoScroll: true,
				fieldDefaults: {
					labelAlign: 'top',
					msgTarget: 'side',
					padding: 0
				},
				items: [
				
					this.setStateField({
						name: 'oedp_state'
					}),
			
					this.publishStartField({
						name: 'oedp_date_start'
					}),
					
					this.publishEndField({
						name: 'oedp_date_end'
					}),

					this.chooseImageField({
						name: 'oedp_media_id'
					}),
						
				]
			});
			
			var panel_content = Ext.create('Ext.form.Panel', {
				title: 'Content',
				border: false,
				region: 'center',
				cls: 'innen-content',
				xtype: 'form',
				autoScroll: true,
	
				fieldDefaults: {
					labelAlign: 'top',
					msgTarget: 'side',
					padding: 0
				},
	
				items: [
					
					{
					
					xtype: 'fieldcontainer',
					layout: 'hbox',
					width: '100%',
					forceFit: true,
					defaultType: 'textfield',
		
					items: [
		
						{
						xtype: 'container',
						flex: 1,
						items: [
							
								{
									xtype: 'textfield',
									fieldLabel: 'First Name:',
									name: 'oedp_name_first',
									width: '100%'
								},
			
								{
									xtype: 'textfield',
									fieldLabel: 'Last Name:',
									name: 'oedp_name_last',
									width: '100%'
								},
								
							
								{
								xtype: 'textareafield',
								fieldLabel: 'Keywords',
								name: 'oedp_keywords',
								width: '100%',
								height: 120
								},
							
							]
						},
						
						{
							xtype: 'splitter',
							width: 20,
						},
						{
							xtype:'xr_field_html',
							fieldLabel: 'Bio',
							name: 'oedp_bio',
							height: 220,
							flex: 3
						} 
		
					]
					},
									
	
					this.setLinkField({
						name: 'oedp_url'
					})			
					
				]
			});
			

			var gui = Ext.create('Ext.form.Panel', {
				border: false,
				title: 'Edit Designerprofile - ID: '+id,
				
				tbar: [{
					text: 'Save',
					iconCls: 'xf_save',
					scope: this,
					handler: function() {
						var values = panel_settings.getForm().getValues();
						Ext.apply(values, panel_content.getForm().getValues());
						saveData(values);
					}
				}],
				
				layout: 'border',
				
				fieldDefaults: {
					labelAlign: 'top',
					msgTarget: 'side',
					autoScroll: true,
				},

				items: [panel_settings, panel_content]
			});
			
			
			loadData = function()
			{
				console.info("id", id)
				gui.mask('Loading Data ...');
				xframe.ajax({
					scope: me,
					url: me.getAjaxPath('oe_designerprofiles_details/load/'+id),
					params : {
					},
					stateless: function(success, json)
					{
						gui.unmask();
						if (!success) return;
	
						panel_settings.getForm().setValues(json);
						panel_content.getForm().setValues(json);
					}
				});
			}
			
			
			saveData = function(values)
			{
			console.info(values);
			gui.mask('Saving Data ...');
			xframe.ajax({
				scope: me,
				type: 'post',
				jsonData: values,
				url: me.getAjaxPath('oe_designerprofiles_details/save/'+id),
				params : {
					
				},
				stateless: function(success, json)
				{
					gui.unmask();
					if (!success) return;

					panel_settings.getForm().setValues(json);
					panel_content.getForm().setValues(json);
				}
			});
			},
			
	
			gui.on('afterrender',function(){
				loadData();
			},this,{buffer:1});
	
			this.showContent(gui);
	},


	showDefault: function() {
		
		var me = this;

		var gui = Ext.create('Ext.form.Panel', {
			border: false,
			title: 'Edit Day Issue .....',
			bodyStyle:'padding:5px 5px 0',
			tbar: [{
				text: 'Save',
				iconCls: 'xf_save',
				scope: this,
				handler: function() {
					var values = panel_settings.getForm().getValues();
					Ext.apply(values, panel_content.getForm().getValues());
					saveData(values);
				}
			}],
			autoScroll: true,
	
			fieldDefaults: {
				labelAlign: 'top',
				msgTarget: 'side'
			},

			listeners: {
				scope: this,
				buffer: 1,
				afterrender: function() {

					console.info(arguments);
					console.info(gui.getForm().getValues());
					
					gui.getForm().setValues({

					});

				}
			},

			items: [
			{
				xtype: 'container',
				anchor: '100%',
				layout:'column',
				items:[{
					xtype: 'container',
					columnWidth:.5,
					layout: 'anchor',
					items: [
					this.titleField(),
					{
						xtype: 'textfield',
						emptyText: 'Choose Image ...',
						fieldLabel: 'Image',
						anchor: '96%'
					},{
						xtype:'htmleditor',
						fieldLabel: 'Left',
						name: 'first',
						anchor:'96%'
					}]
				},{
					xtype: 'container',
					columnWidth:.5,
					layout: 'anchor',
					items: [{
						xtype: 'textfield',
						emptyText: 'State',
						fieldLabel: 'State',
						anchor: '100%'
					},{
						xtype: 'datefield',
						fieldLabel: 'Issue for Day',
						anchor: '96%'
					},{
						xtype:'htmleditor',
						fieldLabel: 'Right',
						name: 'company',
						anchor:'96%'
					}]
				}]
			}]

		});


		this.showContent(gui);
	},

	
	// TODO
	showInterview: function(id) {

		var me 		= this;
		var columns = [
		{ text: 'Image',  		dataIndex: 'thumb'},
		{ text: 'Filename',  	dataIndex: 'name' },
		{ text: 'Title',  		dataIndex: 'title'},
		{ text: 'Description',  dataIndex: 'description'},
		{ text: 'Uploaded', 	dataIndex: 'uploaded' },
		{ text: 'Size', 		dataIndex: 'size' },
		{ text: 'Size', 		dataIndex: 'del' }
		];

		var imageGrid = xframe_pattern.getInstance().genGrid({
			title: 'Media Manager',
			forceFit: true,
			border: false,
			split: true,
			collapseMode: 'mini',
			button_del: true,
			button_add: true,
			search: true,
			pager: true,
			xstore: {

				pid: 	'as_id',

				load: 	this.getAjaxPath('oe_mediamanager/load'),
				remove: this.getAjaxPath('oe_mediamanager/remove'),
				update: this.getAjaxPath('oe_mediamanager/update'),
				insert: this.getAjaxPath('oe_mediamanager/insert'),
				move: 	this.getAjaxPath('oe_mediamanager/move'),

				params: {
				},

				fields: [
				{name:'image',			text:'Image', 			type: 'string'},
				{name:'title',			text:'Title', 			type: 'string'},
				{name:'description',	text:'Description', 	type: 'string'},
				{name:'alt',			text:'Alt', 			type: 'string'},
				{name:'uploaded',		text:'Uploaded', 		type: 'date'},
				{name:'size',			text:'Size', 			type: 'float'}
				],

			},
			listeners: {
				scope: this,
				buffer: 1,
				itemdblclick: function(g,record) {

				}
			}
		});

		imageGrid.on('afterrender',function(){
		},this);

		var panel_settings = Ext.widget({
			xtype: 'form',
			border: false,
			region: 'west',
			title: 'Settings',
			width: 180,
			collapsible: true,
			collapseDirection : 'left',
			margin: '0',
			split: true,
			cls: 'settings',
			autoScroll: true,
			fieldDefaults: {
				labelAlign: 'top',
				msgTarget: 'side',
				padding: 0
			},
			items: [

			this.setStateField({
				name: 'oebp_state'
			}),
			this.simplyCombo({
				fieldLabel: 'Featured Post',
				name: 'oebp_featured',
				data: [{k:'0',v:'No'},{k:'1',v:'Yes'}]
			}),
			this.publishStartField({
				name: 'oebp_date_start'
			}),
			this.publishEndField({
				name: 'oebp_date_end'
			}),
			this.chooseImageField({
				name: 'oebp_media_id'
			}),
			]
		});


		var tpanel_content 	= Ext.create('Ext.form.Panel', {
			title: 'Post',
			border: false,
			cls: 'innen-content',
			xtype: 'form',
			autoScroll: true,

			fieldDefaults: {
				labelAlign: 'top',
				msgTarget: 'side',
				padding: 0
			},

			items: [
			
			this.titleField({
				name: 'oebp_title',
				name_keywords: 'oebp_keywords'
			}),
			
			{
				xtype:'xr_field_html',
				fieldLabel: 'Short description',
				name: 'oebp_desc_short',
				height: 160,
			},{
				xtype: 'fieldcontainer',
				layout: 'column',
				width: '100%',
				items: [{
					xtype:'xr_field_html',
					columnWidth: 0.5,
					fieldLabel: 'Left',
					name: 'oebp_col_left',
				},{
					xtype: 'splitter',
					width:20
				},{
					xtype:'xr_field_html',
					columnWidth: 0.5,
					fieldLabel: 'Right',
					name: 'oebp_col_right'
				}]
			},{
				xtype: 'fieldcontainer',
				layout: 'column',
				forceFit: true,
				defaultType: 'textfield',
				items: [
				{
					xtype: 'container',
					columnWidth: 0.5,
					items: [
						this.chooseImageField({
							fieldLabel: 'Blog Featured', 
							name: 'oebp_img_promo_single_id'
						})
					]
				},
				{
					xtype: 'container',
					columnWidth: 0.5,
					items: [
						this.chooseImageField({
							fieldLabel: 'Blog Overview', 
							name: 'oebp_img_promo_id'
						})
					]
				}]
			}]
		});


		var tpanel_preview = {
			title: 'Preview',
			html: 'preview'
		};

		var panel_content = {
			tbar: [{
				text: 'Save',
				iconCls: 'xf_save',
				scope: this,
				handler: function() {
					var values = panel_settings.getForm().getValues();
					Ext.apply(values, tpanel_content.getForm().getValues());
					saveData(values);
				}
			}],
			xtype: 'tabpanel',
			region: 'center',
			border: false,
			cls: 'content',
			items: [tpanel_content,imageGrid,tpanel_preview]
		};

		var gui = Ext.create('Ext.panel.Panel', {
			border: false,
			title: 'Edit Blog Post',
			//tbar: this.getTbarSub(),
			layout: 'border',
			fieldDefaults: {
				labelAlign: 'top',
				msgTarget: 'side',
				autoScroll: true,
			},

			items: [panel_settings,panel_content]
		});


		loadData = function()
		{
			gui.mask('Loading Data ...');
			xframe.ajax({
				scope: me,
				url: me.getAjaxPath('oe_blogposts_details/load/'+id),
				params : {
				},
				stateless: function(success, json)
				{
					gui.unmask();
					if (!success) return;

					panel_settings.getForm().setValues(json);
					tpanel_content.getForm().setValues(json);
				}
			});
		},
		
		saveData = function(values)
		{
			console.info(values);
			gui.mask('Saving Data ...');
			xframe.ajax({
				scope: me,
				type: 'post',
				jsonData: values,
				url: me.getAjaxPath('oe_blogposts_details/save/'+id),
				params : {
					
				},
				stateless: function(success, json)
				{
					gui.unmask();
					if (!success) return;

					panel_settings.getForm().setValues(json);
					tpanel_content.getForm().setValues(json);
				}
			});
		},
	
		gui.on('afterrender',function(){
			loadData();
		},this,{buffer:1});

		this.showContent(gui);
	},



	
	showOtherarticle: function(id) {
		
		
		var me 		= this;
		var columns = [
		{ text: 'Image',  		dataIndex: 'thumb'},
		{ text: 'Filename',  	dataIndex: 'name' },
		{ text: 'Title',  		dataIndex: 'title'},
		{ text: 'Description',  dataIndex: 'description'},
		{ text: 'Uploaded', 	dataIndex: 'uploaded' },
		{ text: 'Size', 		dataIndex: 'size' },
		{ text: 'Size', 		dataIndex: 'del' }
		];

		var tpanel_gallery = xframe_pattern.getInstance().genGrid({
			title: 'Gallery',
			forceFit: true,
			border: false,
			split: true,
			collapseMode: 'mini',
			button_del: true,
			button_add: true,
			search: true,
			pager: true,
			xstore: {

				pid: 	'as_id',

				load: 	this.getAjaxPath('oe_mediamanager/load'),
				remove: this.getAjaxPath('oe_mediamanager/remove'),
				update: this.getAjaxPath('oe_mediamanager/update'),
				insert: this.getAjaxPath('oe_mediamanager/insert'),
				move: 	this.getAjaxPath('oe_mediamanager/move'),

				params: {
				},

				fields: [
				{name:'image',			text:'Image', 			type: 'string'},
				{name:'title',			text:'Title', 			type: 'string'},
				{name:'description',	text:'Description', 	type: 'string'},
				{name:'alt',			text:'Alt', 			type: 'string'},
				{name:'uploaded',		text:'Uploaded', 		type: 'date'},
				{name:'size',			text:'Size', 			type: 'float'}
				],

			},
			listeners: {
				scope: this,
				buffer: 1,
				itemdblclick: function(g,record) {

				}
			}
		});

		tpanel_gallery.on('afterrender',function(){
		},this);

		var panel_settings = Ext.widget({
			xtype: 'form',
			border: false,
			region: 'west',
			title: 'Settings',
			width: 180,
			collapsible: true,
			collapseDirection : 'left',
			margin: '0',
			split: true,
			cls: 'settings',
			autoScroll: true,
			fieldDefaults: {
				labelAlign: 'top',
				msgTarget: 'side',
				padding: 0
			},
			items: [

				this.setStateField({
				name: 'oeoa_state'
				}),
			
				this.publishStartField({
					name: 'oeoa_date_start'
				}),
				this.publishEndField({
					name: 'oeoa_date_end'
				}),
				this.chooseImageField({
					name: 'oeoa_media_id'
				}),
			]
		});


		var tpanel_content 	= Ext.create('Ext.form.Panel', {
			title: 'Post',
			border: false,
			cls: 'innen-content',
			xtype: 'form',
			autoScroll: true,

			fieldDefaults: {
				labelAlign: 'top',
				msgTarget: 'side',
				padding: 0
			},

			items: [
				
				{
					xtype: 'fieldcontainer',
					layout: 'hbox',
					width: '100%',
					forceFit: true,
					defaultType: 'textfield',
		
					items: [
		
						{
						xtype: 'container',
						flex: 3,
							items: [
								{
									xtype: 'textfield',
									name: 'oeoa_title',
									fieldLabel: 'Title',
									width: '100%',
									height: 40
								},
								
								{
									xtype: 'textareafield',
									fieldLabel: 'Short description',
									name: 'oeoa_desc_short',
									height: 175,
									width: '100%'
								},
							]
						},
						
						{
							xtype: 'splitter',
							width: 20,
						},
						{
							xtype: 'textareafield',
							fieldLabel: 'Keywords',
							name: 'oeoa_keywords',
							flex: 1,
							height: 220
						}
		
					]
				},
				
				
				{
					xtype: 'fieldcontainer',
					layout: 'column',
					width: '100%',
					items: [{
						xtype:'xr_field_html',
						columnWidth: 0.5,
						fieldLabel: 'Left',
						name: 'oeoa_col_left',
					},{
						xtype: 'splitter',
						width:20
					},{
						xtype:'xr_field_html',
						columnWidth: 0.5,
						fieldLabel: 'Right',
						name: 'oeoa_col_right'
					}]
				},
				
				
				this.setLinkField({
					name: 'oeoa_url'
				})				
			
			]
		});


		var tpanel_preview = {
			title: 'Preview',
			html: 'preview'
		};
		
		var tpanel_seo = {
			title: 'SEO',
			html: 'seo'
		};
		
		var tpanel_log = {
			title: 'Log',
			html: 'log'
		};

		var panel_content = {
			tbar: [{
				text: 'Save',
				iconCls: 'xf_save',
				scope: this,
				handler: function() {
					var values = panel_settings.getForm().getValues();
					Ext.apply(values, tpanel_content.getForm().getValues());
					saveData(values);
				}
			}],
			xtype: 'tabpanel',
			region: 'center',
			border: false,
			cls: 'content',
			items: [tpanel_content, tpanel_gallery, tpanel_preview, tpanel_seo, tpanel_log]
		};

		var gui = Ext.create('Ext.panel.Panel', {
			border: false,
			title: 'Edit Other Article',
			//tbar: this.getTbarSub(),
			layout: 'border',
			fieldDefaults: {
				labelAlign: 'top',
				msgTarget: 'side',
				autoScroll: true,
			},

			items: [panel_settings,panel_content]
		});


		loadData = function()
		{
			gui.mask('Loading Data ...');
			xframe.ajax({
				scope: me,
				url: me.getAjaxPath('oe_otherarticle_details/load/'+id),
				params : {
				},
				stateless: function(success, json)
				{
					gui.unmask();
					if (!success) return;

					panel_settings.getForm().setValues(json);
					tpanel_content.getForm().setValues(json);
				}
			});
		},
		
		saveData = function(values)
		{
			console.info(values);
			gui.mask('Saving Data ...');
			xframe.ajax({
				scope: me,
				type: 'post',
				jsonData: values,
				url: me.getAjaxPath('oe_otherarticle_details/save/'+id),
				params : {
					
				},
				stateless: function(success, json)
				{
					gui.unmask();
					if (!success) return;

					panel_settings.getForm().setValues(json);
					tpanel_content.getForm().setValues(json);
				}
			});
		},
	
		gui.on('afterrender',function(){
			loadData();
		},this,{buffer:1});

		this.showContent(gui);
	},



	newMagazine: function() {

		var contentItems = [

			{
				title: 'Settings',
				collapsible: true,
				collapseDirection : 'left',
				width: 180,
				margin: '0',
				cls: 'settings',
				xtype: 'form',
				fieldDefaults: {
					labelAlign: 'top',
					msgTarget: 'side',
					padding: 0
				},
	
				items: [
	
				this.simplyCombo({
					fieldLabel: 'State',
					name: 'state',
					data: [{k:'',v:''},{k:'published',v:'Published'},{k:'pending',v:'Pending Review'}]
				}),
	
				this.simplyCombo({
					fieldLabel: 'Issue',
					name: 'issue',
					data: [{k:'',v:''},{k:'2014_03',v:'2014 / 03'},{k:'2014_04',v:'2014 / 04'},{k:'2014_05',v:'2014 / 05'}]
				}),
	
				{
					xtype: 'button',
					iconCls:'xf_grid_add',
					text: 'New Issue',
					width: 150,
					listeners: {
						scope: this,
						click: function() {
							this.showDialog('issue');
						}
					}
				},
	
				this.chooseImageField('Cover Image'),
	
				]
	
			},
	
			{
				title: 'Content',
				columnWidth: 1,
				border: false,
				cls: 'content',
				fieldDefaults: {
					labelAlign: 'top',
					msgTarget: 'side',
					padding: 0
				},
				defaults: {
					padding: '20,0,0,0'
				},
	
				items: [

					{
						html: 'Hier Allgemeine Settings und Übersicht zum Fortschritt (print: 250 total, x confirmed, x not confirmed, still to do: x)...'
					},
				]
			}
		];

		var gui = Ext.create('Ext.tab.Panel', {
			title: 'Blog Post ID: ',
			border: false,
			autoScroll: true,
			tbar: this.getTbarSub(),
			layout: 'column',

			defaults: {
				border: false,
			},

			items:[

			{
				title: 'Overall Settings',
				minHeight: 500,
				layout: 'column',

				items: contentItems,
			},

			{
				title: 'Print',
				html: 'Anzeige preselected print submissions für gewählte issue --> submission detail mit Prev / next --> selected oder not selected'
			},

			{
				title: 'TV',
				html: 'Anzeige preselected tv submissions für gewählte issue --> submission detail mit Prev / next --> selected oder not selected'
			},

			{
				title: 'Digital',
				html: 'Anzeige preselected digital submissions für gewählte issue --> submission detail mit Prev / next --> selected oder not selected'
			},

			{
				title: 'Normal interview',
				html: 'Auswahl "normales" Interview'
			},

			{
				title: 'Digital interview',
				html: 'Auswahl "digitales" Interview'
			},

			{
				title: 'Infotext',
				html: 'Eingabe Infotext'
			},

			{
				title: 'Translations',
				html: 'Übersetzungen (pdf) add - es. fra, it, ru, jp + möglichkeit weitere'
			},

			{
				title: 'Publish Magazine',
				html: 'nochmal übersicht und publish möglichkeit'
			},
			]

		});


		return gui;
	},
	
	
	showTasks: function() {
		
		var tasks = xframe_pattern.getInstance().genGrid({
			region:'center',
			forceFit:true,
			border:false,
			split: true,
			collapseMode: 'mini',
			button_del:true,
			button_add:true,
			search: true,
			pager: true,
			xstore: {
				load: 	this.getAjaxPath('a_tasks/load/'+id),
				pid: 	'ecr_id',
				fields: [
					{name:'created', 		text:'Ceated', 			type: 'timestamp'},
					{name:'dueDate', 		text:'Due Date', 		type: 'timestamp'},
					{name:'assignedTo', 	text:'Assigned to', 	type: 'string'},
					{name:'assignedFrom', 	text:'Assigned from', 	type: 'string'},
					{name:'summary', 		text:'Summary', 		type: 'string'},
					{name:'priority', 		text:'Priority', 		type: 'int'},
					{name:'status', 		text:'Status', 			type: 'string'}
				],
			},
			listeners: {
				scope: this,
				buffer: 1,
				itemdblclick: function(g,record) {}
			}
		});
		
		tasks.on('afterrender',function(){
			tasks.getStore().load();
		},this);
		
		
		
		
		
	},


	showSubmissionSettings: function() {

		var contentItems = [

			{
				title: 'Settings',
				collapsible: true,
				collapseDirection : 'left',
				width: 180,
				margin: '0',
				cls: 'settings',
				xtype: 'form',
				fieldDefaults: {
					labelAlign: 'top',
					msgTarget: 'side',
					padding: 0
				},
	
				items: [
	
					{
						xtype: 'button',
						iconCls:'xf_grid_add',
						text: 'New Special Submission',
						width: 150,
						listeners: {
							scope: this,
							click: function() {
								this.showDialog('submission');
							}
						}
					},
	
				]
			},
	
			{
				title: 'Content',
				columnWidth: 1,
				border: false,
				cls: 'content',
				fieldDefaults: {
					labelAlign: 'top',
					msgTarget: 'side',
					padding: 0
				},
				defaults: {
					padding: '20,0,0,0'
				},
	
				items: [
	
					{
						html: 'Hier Allgemeine Settings und Erklärungen zum Prozess'
					}
				]
			}

		];

		var printItems = [

			{
				title: 'Settings',
				collapsible: true,
				collapseDirection : 'left',
				width: 180,
				margin: '0',
				cls: 'settings',
				xtype: 'form',
				fieldDefaults: {
					labelAlign: 'top',
					msgTarget: 'side',
					padding: 0
				},
	
				items: [
	
					this.setStateField(),

					{
						fieldLabel: 'Deadline',
						xtype: 'datefield',
						maxWidth: 300
					}
				]
	
			},
	
			{
				title: 'Content',
				columnWidth: 1,
				border: false,
				cls: 'content',
				fieldDefaults: {
					labelAlign: 'top',
					msgTarget: 'side',
					padding: 0
				},
				defaults: {
					padding: '20,0,0,0'
				},
	
				items: [
	
				]
			}

		];

		var gui = Ext.create('Ext.tab.Panel', {
			title: 'Submission Settings: ',
			border: false,
			autoScroll: true,
			tbar: this.getTbarSub(),
			layout: 'column',

			defaults: {
				border: false,
			},

			items:[

				{
					title: 'Overall',
					minHeight: 500,
					layout: 'column',

					items: contentItems,
				},
	
				{
					title: 'Print',
					html: 'Credits auswählen etc',
	
					items: printItems,
				},
	
				{
					title: 'TV',
				},
	
				{
					title: 'Digital',
				},
	
				{
					title: 'Specials',
					html: 'Zwischenschritt Auswahl welches special, dann bearbeiten',
					items: [
	
						this.searchCombo({
							fieldLabel: 'Which Special?',
							name: 'which_special',
							minChars: 3,
							emptyText: 'Search Title',
							searchScope: 'special_title'
						}),
	
					],
				},
	
				{
					title: 'Students',
				},

			]

		});

		this.showContent(gui);
	},


	setVideoJumps: function() {

		var myvideo = document.getElementById('myvideo'),
		jumplink = Ext.get('myvideo');

		console.log('video: ' + myvideo + ', jump: ' + jumplink);

		if (jumplink) {
			jumplink.addEventListener("click", function (event) {
				console.info("clicked");
				event.preventDefault();
				myvideo.play();
				myvideo.pause();
				myvideo.currentTime = 7;
				myvideo.play();
			}, false);
		}
	},



	openContact: function(id) {
		
		var me = this;
		
		var contactDetailsLeft = Ext.create('Ext.form.Panel', {
				xtype: 'form',
				columnWidth: 0.33,
				cls: 'innen-content',
				border: false,
				fieldDefaults: {
					labelAlign: 'top',
					msgTarget: 'side',
					padding: 0,
					anchor: '96%'
				},
				defaultType: 'textfield',
				items: [

					{
						xtype: 'box',
						cls: 'boxTitle',
						html: 'Personal'
					},


					this.simplyCombo({
						fieldLabel: 'Salutation',
						name: 'ec_salutation',
						value: '',
						data: [{k:'',v:''},{k:'Mrs.',v:'Mrs.'},{k:'Ms.',v:'Ms.'}, {k:'Mr.',v:'Mr.'}]
					}),

					{
						fieldLabel: 'First Name',
						name: 'ec_firstname',
					},

					{
						fieldLabel: 'Middle Name',
						name: 'ec_middlename',
					},
					
					{
						fieldLabel: 'Last Name',
						name: 'ec_lastname',
					},

					{
						fieldLabel: 'Adress',
						name: 'ec_address',
					},

					{
						fieldLabel: 'ZIP',
						name: 'ec_zip',
					},

					{
						fieldLabel: 'City',
						name: 'ec_city',
					},


					{
						fieldLabel: 'Country',
						name: 'ec_country_id'
					},

					{
						fieldLabel: 'Phone',
						name: 'ec_phone'
					},
					
					{
						fieldLabel: 'Phone 2',
						name: 'ec_phone2'
					},
					
					{
						fieldLabel: 'Fax',
						name: 'ec_fax'
					},
					
					{
						fieldLabel: 'Email',
						name: 'ec_email'
					},
					
					{
						fieldLabel: 'Email 2',
						name: 'ec_email2'
					},

					{
						fieldLabel: 'Website',
						name: 'ec_url',
						minChars: 3,
					},

				]
		});
		
		
		
		var contactDetailsMiddle = Ext.create('Ext.form.Panel', {
				xtype: 'form',
				columnWidth: .33,
				cls: 'innen-content',
				border: false,
				fieldDefaults: {
					labelAlign: 'top',
					msgTarget: 'side',
					padding: 0,
					anchor: '96%'
				},
				defaultType: 'textfield',
				items: [
					{
						xtype: 'box',
						cls: 'boxTitle',
						html: 'Corporate'
					},

					this.simplyCombo({
						fieldLabel: 'Branch',
						name: 'ec_branch',
						value: '',
						data: [{k:'photographer',v:'Photographer'}, {k:'illustrator',v:'Illustrator'}, {k:'copywriter',v:'Copywriter'}]
					}),

					this.simplyCombo({
						fieldLabel: 'Company',
						name: 'ec_company',
						value: '',
						data: [{k:'',v:''}]
					}),

					this.simplyCombo({
						fieldLabel: 'Position',
						name: 'ec_position',
						value: '',
						data: [{k:'',v:''}]
					}),

					this.simplyCombo({
						fieldLabel: 'Represented by',
						name: 'ec_representedBy',
						value: '',
						data: [{k:'',v:''}]
					})

				]
		});
		
		
		
		var contactDetailsRight = Ext.create('Ext.form.Panel', {
				xtype: 'form',
				columnWidth: .33,
				cls: 'innen-content',
				border: false,
				fieldDefaults: {
					labelAlign: 'top',
					msgTarget: 'side',
					padding: 0,
					anchor: '96%'
				},
				defaultType: 'textfield',
				items: [
					{
						xtype: 'box',
						cls: 'boxTitle',
						html: 'Intern'
					},

					{
						fieldLabel: 'Password',
						name: 'ec_password'
					},
					
					this.simplyCombo({
						fieldLabel: 'Assigned to',
						name: 'ec_assigned_to',
						data: [{k:'0',v:'none'}]
					}),

					{
						xtype: 'datefield',
						emptyText: 'Pick date ...',
						fieldLabel: 'Remind me',
						name: 'remindme'
					},

					{
						xtype: 'boxselect',
						fieldLabel: "Category",
						value: "WA",
						displayField: "_display",
						valueField: "_value",
						emptyText: "Pick categories",
						queryMode: "remote",
					},

					{
						xtype: 'textareafield',
						fieldLabel: 'Notes',
						name: 'ec_notes',
					},

					this.simplyCombo({
						fieldLabel: 'Retired / closed',
						name: 'ec_retired',
						data: [{k:'0',v:'No'}, {k:'1',v:'Yes'}]
					}),

					this.simplyCombo({
						fieldLabel: 'Exclude Ranking',
						name: 'ec_excludeRanking',
						data: [{k:'0',v:'No'}, {k:'1',v:'Yes'}]
					}),

					{
						fieldLabel: 'Data modified',
						name: 'ec_modified',
						disabled: true
					},

					{
						fieldLabel: 'Data created',
						name: 'ec_created',
						disabled: true
					},

				]
		});
		
		
		var ranking = xframe_pattern.getInstance().genGrid({
			region:'center',
			forceFit:true,
			border:false,
			split: true,
			collapseMode: 'mini',
			search: true,
			pager: true,
			xstore: {
				load: 	this.getAjaxPath('e_contact_details/load/'+id),
				pid: 	'ec_id',
				fields: [
				{name:'ranking',		text:'Ranking', 		type: 'string'},
				{name:'currentYear', 	text:'Current Year', 	type: 'int'},
				{name:'lastYear', 		text:'Last Year', 		type: 'int'},
				{name:'last3Years', 	text:'Last 3 Years', 	type: 'int'},
				{name:'last5Years', 	text:'Last 5 Years', 	type: 'int'},
				{name:'last10Years', 	text:'Last 10 Years', 	type: 'int'},
				{name:'allYears', 		text:'All Years', 		type: 'int'},
				],
			},
			listeners: {
				scope: this,
				buffer: 1,
				itemdblclick: function(g,record) {
					
				},
				afterrender: function() {
					ranking.store.load();
				}
			}
		});
		
		
		var representant = xframe_pattern.getInstance().genGrid({
			region:'center',
			forceFit:true,
			border:false,
			split: true,
			collapseMode: 'mini',
			button_del:true,
			button_add:true,
			search: true,
			pager: true,
			xstore: {
				load: 	this.getAjaxPath('e_contact_representants/load/'+id),
				remove: this.getAjaxPath('e_contact_representants/remove'),
				update: this.getAjaxPath('e_contact_representants_details/update'),
				insert: this.getAjaxPath('e_contact_representants/insert'),
				move: 	this.getAjaxPath('e_contact_representants/move'),
				
				
				pid: 	'ecr_id',
				fields: [
				{name:'ecr_id', 		text:'ID', 					type: 'int'},
				{name:'ec_id',			text:'Representant for ID', type: 'string'},
				{name:'ec_company', 	text:'Company', 			type: 'string'},
				{name:'ec_firstname', 	text:'First Name', 			type: 'string'},
				{name:'ec_lastname', 	text:'Last Name', 			type: 'string'},
				{name:'ecr_created', 	text:'Created', 			type: 'string'},
				{name:'ecr_modified', 	text:'Modified',	 		type: 'string'}
				],
			},
			listeners: {
				scope: this,
				buffer: 1,
				itemdblclick: function(g,record) {}
			}
		});
		
		representant.on('afterrender',function(){
			representant.getStore().load();
		},this);
		
		
		
		var duplicates = xframe_pattern.getInstance().genGrid({
			region:'center',
			forceFit:true,
			border:false,
			split: true,
			collapseMode: 'mini',
			button_del:true,
			button_add:true,
			search: true,
			pager: true,
			xstore: {
				load: 	this.getAjaxPath('e_contact_duplicates/load/'+id),
				pid: 	'ecd_id',
				fields: [
				{name:'ecd_id', 			text:'ID', 				type: 'int'},
				{name:'ec_id', 				text:'Duplicate ID', 	type: 'string'},
				{name:'ec_company', 		text:'Company', 		type: 'string'},
				{name:'ec_firstname', 		text:'First Name', 		type: 'string'},
				{name:'ec_lastname', 		text:'Last Name', 		type: 'string'},
				{name:'ecd_created', 		text:'Created', 		type: 'string'}
				],
			},
			listeners: {
				scope: this,
				buffer: 1,
				itemdblclick: function(g,record) {}
			}
		});
		
		duplicates.on('afterrender',function(){
			duplicates.getStore().load();
		},this);
		
		
		
		var associates = xframe_pattern.getInstance().genGrid({
			region:'center',
			forceFit:true,
			border:false,
			split: true,
			collapseMode: 'mini',
			button_del:true,
			button_add:true,
			search: true,
			pager: true,
			xstore: {
				load: 	this.getAjaxPath('e_contact_associates/load/'+id),
				pid: 	'eca_id',
				fields: [
				{name:'eca_id', 			text:'ID', 				type: 'int'},
				{name:'ec_id', 				text:'Duplicate ID', 	type: 'string'},
				{name:'ec_company', 		text:'Company', 		type: 'string'},
				{name:'ec_firstname', 		text:'First Name', 		type: 'string'},
				{name:'ec_lastname', 		text:'Last Name', 		type: 'string'},
				{name:'eca_createdon', 		text:'Created', 		type: 'string'}
				],
			},
			listeners: {
				scope: this,
				buffer: 1,
				itemdblclick: function(g,record) {}
			}
		});
		
		associates.on('afterrender',function(){
			associates.getStore().load();
		},this);
		
		
		var paidads = xframe_pattern.getInstance().genGrid({
			region:'center',
			forceFit:true,
			border:false,
			split: true,
			collapseMode: 'mini',
			button_del:true,
			button_add:true,
			search: true,
			pager: true,
			xstore: {
				load: 	this.getAjaxPath('e_contact_paidads/load/'+id),
				pid: 	'id_x',
				fields: [
				{name:'ecb_id', 		text:'ID', 					type: 'int'},
				{name:'ecb_firstname',	text:'Firstname',			type: 'string'},
				{name:'ecb_lastname',	text:'Lastname', 			type: 'string'},
				{name:'ecb_company',	text:'Company', 			type: 'string'},
				{name:'ecb_city',		text:'City', 				type: 'string'},
				{name:'ecb_country_id',	text:'Country', 			type: 'int'},
				{name:'ecb_email',		text:'Email', 				type: 'string'},
				{name:'ecb_phone',		text:'Phone Number', 		type: 'string'},
				],
			},
			listeners: {
				scope: this,
				buffer: 1,
				itemdblclick: function(g,record) {}
			}
		});
		
		paidads.on('afterrender',function(){
			paidads.getStore().load();
		},this);
		
		
		var log = xframe_pattern.getInstance().genGrid({
			region:'center',
			forceFit:true,
			border:false,
			split: true,
			collapseMode: 'mini',
			button_del:true,
			button_add:true,
			search: true,
			pager: true,
			xstore: {
				load: 	this.getAjaxPath('e_contact_log/load/'+id),
				pid: 	'id_x',
				fields: [
				{name:'ecb_id', 		text:'ID', 					type: 'int'},
				{name:'ecb_firstname',	text:'Firstname',			type: 'string'},
				{name:'ecb_lastname',	text:'Lastname', 			type: 'string'},
				{name:'ecb_company',	text:'Company', 			type: 'string'},
				{name:'ecb_city',		text:'City', 				type: 'string'},
				{name:'ecb_country_id',	text:'Country', 			type: 'int'},
				{name:'ecb_email',		text:'Email', 				type: 'string'},
				{name:'ecb_phone',		text:'Phone Number', 		type: 'string'},
				],
			},
			listeners: {
				scope: this,
				buffer: 1,
				itemdblclick: function(g,record) {}
			}
		});
		
		log.on('afterrender',function(){
			log.getStore().load();
		},this);
		
		
		var backups = xframe_pattern.getInstance().genGrid({
			region:'center',
			forceFit:true,
			border:false,
			split: true,
			collapseMode: 'mini',
			button_del:true,
			button_add:true,
			search: true,
			pager: true,
			xstore: {
				load: 	this.getAjaxPath('e_contact_backups/load/'+id),
				pid: 	'id_x',
				fields: [
				{name:'ecb_id', 		text:'ID', 					type: 'int'},
				{name:'ecb_firstname',	text:'Firstname',			type: 'string'},
				{name:'ecb_lastname',	text:'Lastname', 			type: 'string'},
				{name:'ecb_company',	text:'Company', 			type: 'string'},
				{name:'ecb_city',		text:'City', 				type: 'string'},
				{name:'ecb_country_id',	text:'Country', 			type: 'int'},
				{name:'ecb_email',		text:'Email', 				type: 'string'},
				{name:'ecb_phone',		text:'Phone Number', 		type: 'string'},
				],
			},
			listeners: {
				scope: this,
				buffer: 1,
				itemdblclick: function(g,record) {}
			}
		});
		
		backups.on('afterrender',function(){
			backups.getStore().load();
		},this);
		
		
		
		var gui = Ext.create('Ext.tab.Panel', {

			border: false,
			autoScroll: true,
			forceFit: true,
			title: 'Contact ID: '+id,
			layout: 'column',
			tbar: [

				{
					text: 'Save',
					iconCls: 'xf_save'
				}
			],

			fieldDefaults: {
				labelAlign: 'top',
				msgTarget: 'side'
			},

			items:[

			{
				title: 'Details',
				xtype: 'panel',
				border: false,
				anchor: '100%',
				autoScroll: true,
				layout:'column',
				items: [ contactDetailsLeft, contactDetailsMiddle, contactDetailsRight ]

			},

			{
				title: 'Ranking',
				items: ranking
			},

			{
				title: 'Representant',
				border: false,
				anchor: '100%',
				items: representant
			},
			
			{
				title: 'Duplicates',
				items: duplicates
			},

			{
				title: 'Associates',
				items: associates
			},

			{
				title: 'Log',
				items: log
			},

			{
				title: 'Backups',
				items: backups
			},

			]

		});
		
		
		loadData = function()
			{
				console.info("id", id)
				gui.mask('Loading Data ...');
				xframe.ajax({
					scope: me,
					url: me.getAjaxPath('e_contact_details/load/'+id),
					params : {
					},
					stateless: function(success, json)
					{
						gui.unmask();
						if (!success) return;
	
						contactDetailsLeft.getForm().setValues(json);
						contactDetailsMiddle.getForm().setValues(json);
						contactDetailsRight.getForm().setValues(json);
					}
				});
			},
			
			saveData = function(values)
			{
				gui.mask('Saving Data ...');
				xframe.ajax({
					scope: me,
					type: 'post',
					jsonData: values,
					url: me.getAjaxPath('e_contact_details/save/'+id),
					params : {
					},
					stateless: function(success, json)
					{
						gui.unmask();
						if (!success);
	
						contactDetailsLeft.getForm().setValues(json);
						contactDetailsMidlde.getForm().setValues(json);
						contactDetailsRight.getForm().setValues(json);
					}
				});
			},
			
			gui.on('afterrender',function(){
				loadData();
			},this,{buffer:1});
		

		this.showContent(gui);
	},
		



	newCompany: function(id) {

		var gui = Ext.create('Ext.tab.Panel', {

			border: false,
			autoScroll: true,
			title: 'Contact ID: '+id,
			bodyStyle:'padding: 0',
			tbar: [

			{
				text: 'Save',
				iconCls: 'xf_save'
			},

			{
				text: 'Close',
				iconCls: 'xf_abort'
			},
			],

			fieldDefaults: {
				labelAlign: 'top',
				msgTarget: 'side',
				padding: 0,
				margin: 0
			},

			items:[

			{
				title: 'Details',
				items: [

				{
					xtype: 'container',
					anchor: '100%',
					layout:'column',
					bodyStyle:'padding:10px',
					items: [

					{
						xtype: 'container',
						columnWidth:1,
						padding: 10,
						layout: 'anchor',
						defaults: {
							anchor: '96%',
							maxWidth: 600,
						},
						defaultType: 'textfield',
						items: [
						
							{
								fieldLabel: 'Company name',
								name: 'name',
								minChars: 3,
							},
	
							{
								fieldLabel: 'Displayed',
								name: 'displayed',
								minChars: 3,
							},
	
							{
								fieldLabel: 'Branch',
								name: 'branch',
								minChars: 3,
							},
	
							this.simplyCombo({
								fieldLabel: 'Contact person',
								name: 'contactPerson',
								value: '',
								data: [{k:'',v:''}]
							}),
	
							{
								fieldLabel: 'Country',
								name: 'country',
								minChars: 3,
							},
	
							{
								fieldLabel: 'City',
								name: 'city',
								minChars: 3,
							},
	
							{
								fieldLabel: 'Adress',
								name: 'adress',
								minChars: 3,
							},
	
							this.textFieldPlus({
								fieldLabel: 'Phone',
								name: 'phone',
								iconCls:'xf_grid_add',
								buttonText: '',
								// buttonWidth: 150,
								dialogType: 'issue',
							}),
	
	
							this.textFieldPlus({
								fieldLabel: 'Fax',
								name: 'fax',
								iconCls:'xf_grid_add',
								buttonText: '',
								// buttonWidth: 150,
								dialogType: 'issue',
							}),
	
							this.textFieldPlus({
								fieldLabel: 'Email',
								name: 'email',
								iconCls:'xf_grid_add',
								buttonText: '',
								// buttonWidth: 150,
								dialogType: 'issue',
							}),
	
							{
								fieldLabel: 'Website',
								name: 'website',
								minChars: 3,
							},
	
							{
								xtype: 'boxselect',
								fieldLabel: "Category",
								value: "WA",
								displayField: "_display",
								valueField: "_value",
								emptyText: "Pick categories",
							},
	
							{
								xtype: 'textareafield',
								fieldLabel: 'Notes',
								name: 'notes',
							},
	
							{
								xtype: 'datefield',
								emptyText: 'Pick date ...',
								fieldLabel: 'Remind me',
								name: 'remindme'
							},
	
							this.simplyCombo({
								fieldLabel: 'Closed',
								name: 'closed',
								value: 'No',
								data: [{k:'n',v:'No'}, {k:'y',v:'Yes'}]
							}),
	
							this.simplyCombo({
								fieldLabel: 'Exclude Ranking',
								name: 'exclude',
								value: 'No',
								data: [{k:'n',v:'No'}, {k:'y',v:'Yes'}]
							}),
	
							{
								fieldLabel: 'Data modified',
								name: 'modified',
								disabled: true
							},
	
							{
								fieldLabel: 'Data created',
								name: 'created',
								disabled: true
							}
						]
					}
					]
				}

				]
			},

			{
				title: 'Attached Persons',
				items: [

				xframe_pattern.getInstance().genGrid({
					region:'center',
					forceFit:true,
					border:false,
					split: true,
					collapseMode: 'mini',
					button_del:true,
					button_add:true,
					search: true,
					pager: true,
					xstore: {
						load: 	this.getAjaxPath('e_submissionOfTheDayX/load?dayx='),
						pid: 	'SubmissionID',
						fields: [
						{name:'id',				text:'ID', 				type: 'int'},
						{name:'status',			text:'Status', 			type: 'int'},
						{name:'firstName',	 	text:'First Name', 		type: 'string'},
						{name:'lastName',	 	text:'Last Name', 		type: 'string'},
						],
					},
					listeners: {
						scope: this,
						buffer: 1,
						itemdblclick: function(g,record) {
							// this.showSubmission(record.data.SubmissionID);
						}
					}
				}),

				]
			},


			{
				title: 'Representatives',
				items: [

				xframe_pattern.getInstance().genGrid({
					region:'center',
					forceFit:true,
					border:false,
					split: true,
					collapseMode: 'mini',
					button_del:true,
					button_add:true,
					search: true,
					pager: true,
					xstore: {
						load: 	this.getAjaxPath('e_submissionOfTheDayX/load?dayx='),
						pid: 	'SubmissionID',
						fields: [
						{name:'id',				text:'ID', 				type: 'int'},
						{name:'status',			text:'Status', 			type: 'int'},
						{name:'firstName',	 	text:'First Name', 		type: 'string'},
						{name:'lastName',	 	text:'Last Name', 		type: 'string'},
						],
					},
					listeners: {
						scope: this,
						buffer: 1,
						itemdblclick: function(g,record) {
							// this.showSubmission(record.data.SubmissionID);
						}
					}
				}),
				
				]
			},


			{
				title: 'Tasks',
				items: [

					xframe_pattern.getInstance().genGrid({
						region:'center',
						forceFit:true,
						border:false,
						split: true,
						collapseMode: 'mini',
	
						button_del:true,
						button_add:true,
						search: true,
						pager: true,
						xstore: {
							load: 	this.getAjaxPath('e_submissionOfTheDayX/load?dayx='),
							pid: 	'SubmissionID',
							fields: [
							{name:'created', 		text:'Ceated', 			type: 'timestamp'},
							{name:'dueDate', 		text:'Due Date', 		type: 'timestamp'},
							{name:'assignedTo', 	text:'Assigned to', 	type: 'string'},
							{name:'assignedFrom', 	text:'Assigned from', 	type: 'string'},
							{name:'summary', 		text:'Summary', 		type: 'string'},
							{name:'priority', 		text:'Priority', 		type: 'int'},
							{name:'status', 		text:'Status', 			type: 'string'}
	
							],
						},
						listeners: {
							scope: this,
							buffer: 1,
							itemdblclick: function(g,record) {
								// this.showSubmission(record.data.SubmissionID);
							}
						}
					}),
				]
			},

			{
				title: 'Duplicates',
				items: [

				xframe_pattern.getInstance().genGrid({
					region:'center',
					forceFit:true,
					border:false,
					split: true,
					collapseMode: 'mini',
					button_del:true,
					button_add:true,
					search: true,
					pager: true,
					xstore: {
						load: 	this.getAjaxPath('e_submissionOfTheDayX/load?dayx='),
						pid: 	'SubmissionID',
						fields: [
							{name:'id', 		text:'ID', 				type: 'int'},
							{name:'company', 	text:'Company', 		type: 'string'},
							{name:'name', 		text:'Name', 			type: 'string'},
							{name:'createdby', 	text:'Created by', 		type: 'string'}
						],
					},
					listeners: {
						scope: this,
						buffer: 1,
						itemdblclick: function(g,record) {
							// this.showSubmission(record.data.SubmissionID);
						}
					}
				}),

				]
			},

			{
				title: 'Associates',
				items: [

				xframe_pattern.getInstance().genGrid({
					region:'center',
					forceFit:true,
					border:false,
					split: true,
					collapseMode: 'mini',
					button_del:true,
					button_add:true,
					search: true,
					pager: true,
					xstore: {
						load: 	this.getAjaxPath('e_submissionOfTheDayX/load?dayx='),
						pid: 	'SubmissionID',
						fields: [
						{name:'id', 		text:'ID', 				type: 'int'},
						{name:'company', 	text:'Company', 		type: 'string'},
						{name:'name', 		text:'Name', 			type: 'string'},
						{name:'createdby', 	text:'Created by', 		type: 'string'},
						],
					},
					listeners: {
						scope: this,
						buffer: 1,
						itemdblclick: function(g,record) {
							// this.showSubmission(record.data.SubmissionID);
						}
					}
				}),

				]
			},

			/* {
				title: 'Paid Ads',
				items: [

				xframe_pattern.getInstance().genGrid({
					region:'center',
					forceFit:true,
					border:false,
					split: true,
					collapseMode: 'mini',
					button_del:true,
					button_add:true,
					search: true,
					pager: true,
					xstore: {
						load: 	this.getAjaxPath('e_submissionOfTheDayX/load?dayx='),
						pid: 	'SubmissionID',
						fields: [
						{name:'status', 		text:'Status', 				type: 'int'},
						{name:'magazine', 		text:'Magazine', 			type: 'string'},
						{name:'paidAdd', 		text:'Paid Ad', 			type: 'string'},
						{name:'net',	 		text:'Net', 				type: 'float'},
						{name:'base',	 		text:'Base', 				type: 'float'},
						{name:'units',	 		text:'Units', 				type: 'int'},
						{name:'salesRep',	 	text:'Sales rep', 			type: 'string'},
						{name:'notes',	 		text:'Notes', 				type: 'text'},
						],
					},
					listeners: {
						scope: this,
						buffer: 1,
						itemdblclick: function(g,record) {
							// this.showSubmission(record.data.SubmissionID);
						}
					}
				}),

				]
			}, */

			{
				title: 'Log',
				items: [

				xframe_pattern.getInstance().genGrid({
					region:'center',
					forceFit:true,
					border:false,
					split: true,
					collapseMode: 'mini',
					button_del:true,
					button_add:true,
					search: true,
					pager: true,
					xstore: {
						load: 	this.getAjaxPath('e_submissionOfTheDayX/load?dayx='),
						pid: 	'SubmissionID',
						fields: [
						{name:'date', 		text:'Date', 			type: 'timestamp'},
						{name:'spoketo', 	text:'Spoke to', 		type: 'string'},
						{name:'log', 		text:'Message', 		type: 'string'},
						],
					},
					listeners: {
						scope: this,
						buffer: 1,
						itemdblclick: function(g,record) {
							// this.showSubmission(record.data.SubmissionID);
						}
					}
				}),

				]
			},

			{
				title: 'Backups',
				items: [

				xframe_pattern.getInstance().genGrid({
					region:'center',
					forceFit:true,
					border:false,
					split: true,
					collapseMode: 'mini',
					button_del:true,
					button_add:true,
					search: true,
					pager: true,
					xstore: {
						load: 	this.getAjaxPath('e_submissionOfTheDayX/load?dayx='),
						pid: 	'SubmissionID',
						fields: [
						{name:'updatedDate', 	text:'Date updated', 	type: 'timestamp'},
						{name:'updatedBy', 		text:'Updated by', 		type: 'string'},
						{name:'log', 			text:'Message', 		type: 'string'},
						],
					},
					listeners: {
						scope: this,
						buffer: 1,
						itemdblclick: function(g,record) {
							// this.showSubmission(record.data.SubmissionID);
						}
					}
				}),

				]
			},

			]

		});

		this.showContent(gui);
	},


	editBeUser: function(id) {

		var gui = Ext.create('Ext.tab.Panel', {

			border: false,
			autoScroll: true,
			title: 'BE User ID: '+id,
			bodyStyle:'padding: 0',
			tbar: [

				{
					text: 'Save',
					iconCls: 'xf_save'
				},
	
				{
					text: 'Close',
					iconCls: 'xf_abort'
				}
			],

			fieldDefaults: {
				labelAlign: 'top',
				msgTarget: 'side'
			},

			items:[

				{
					title: 'Details',
					items: [
	
					{
						xtype: 'container',
						anchor: '100%',
						layout:'column',
						bodyStyle:'padding:10px',
						items: [

							{
								xtype: 'container',
								columnWidth:1,
								padding: 10,
								layout: 'anchor',
								defaults: {
									anchor: '96%'
								},
								defaultType: 'textfield',
								items: [
		
		
								{
									fieldLabel: 'Username',
									name: 'username',
									minChars: 3,
								},
		
								{
									fieldLabel: 'Email',
									name: 'email',
									minChars: 3,
								},
		
								{
									fieldLabel: 'First Name',
									name: 'first_name',
									minChars: 3,
								},
		
								{
									fieldLabel: 'Last Name',
									name: 'last_name',
									minChars: 3,
								},
		
								{
									fieldLabel: 'Password',
									name: 'password',
									inputType: 'password',
									minChars: 3,
								},
		
								{
									xtype: 'textareafield',
									fieldLabel: 'Notes',
									name: 'notes',
								},
		
								]
							}
						]
	
					}
	
					]
	
				},
	
				{
					title: 'Ranking'
				},
	
				{
					title: 'Log'
				}

			]

		});

		this.showContent(gui);
	},


	openFrontpageConfig: function() {

		// TODO

		var tbar = Ext.create('Ext.toolbar.Toolbar', {
			items  : [
			
				{
					text: 'Save',
					iconCls: 'xf_save'
				},
	
				{
					text: 'Close',
					iconCls: 'xf_close'
				},
			]
		});

		console.info("front page");

	},


	showBeUsers: function() {

		var fields =  [
		{name:'id', 				type: 'int'},
		{name:'username',	 		type: 'string'},
		{name:'email',			 	type: 'string'},
		{name:'password', 			type: 'password'},
		];

		var gui = xframe_pattern.getInstance().genGrid({
			region:'center',
			forceFit:true,
			border:false,
			title: 'Backend Users',
			split: true,
			collapseMode: 'mini',
			button_del:true,
			button_add:true,
			search: true,
			pager: true,
			columns: [

				{
					text: 'ID',
					maxWidth: 100,
					dataIndex: 'id'
				},
	
				{
					text: 'Username',
					dataIndex: 'username',
					editor:{allowBlank: false}
				},
	
				{
					text: 'Email',
					dataIndex: 'email',
					editor:{allowBlank: false}
				},
	
				{
					text: 'First Name',
					dataIndex: 'first_name',
					editor:{allowBlank: false}
				},
	
				{
					text: 'Last Name',
					dataIndex: 'last_name',
					editor:{allowBlank: false}
				},
	
				{
					text: 'Password',
					dataIndex: 'password',
					editor:{allowBlank: false}
				},
	
				{
					text: 'Notes',
					dataIndex: 'notes',
					editor:{allowBlank: false}
				}

			],
			tbar: [{
				xtype: 'pagingtoolbar',
				border: false,
				flex: 1,
				pageSize: 100,
				// store: store,
				displayInfo: true,
				plugins: Ext.create('Ext.ux.ProgressBarPager', {}),
				displayMsg: '{0} - {1} of {2}'
			}],
			xstore: {
				load: 	this.getAjaxPath('e_submissionOfTheDayX/load?dayx=2014-01-08'),
				pid: 	'SubmissionIsD',
				fields: fields
			},
			listeners: {
				scope: this,
				buffer: 1,
				itemdblclick: function(g,record) {
					this.editBeUser();
				}
			}
		});

		gui.on('afterrender',function(){
			gui.getStore().load();
		},this);

		this.showContent(gui);
	},
	

	showAdsOfTheWeekOverview: function() {

		var fields =  [
		{name:'mediaId', 			type: 'int'},
		{name:'spotMediaId', 		type: 'int'},
		{name:'classicMediaId', 	type: 'int'},
		{name:'printMediaId', 		type: 'int'},
		];

		var gui = xframe_pattern.getInstance().genGrid({
			region:'center',
			forceFit:true,
			border:false,
			title: 'Ads of the week',
			split: true,
			collapseMode: 'mini',
			button_del:true,
			button_add:true,
			search: true,
			pager: true,
			columns: [

			{
				text: 'Week',
				maxWidth: 100,
				dataIndex: 'weekx'
			},

			{
				text: '<b>Spot</b>',
				flex: 1,
				columns: [

					{
						name	 : 'spot_media_id',
						text	 : 'Image',
						minWidth : 150,
						dataIndex: 'mediaId',
						renderer : this.imgRendererSubmissionSmall,
						scope: this
					},
	
					{
						text     : 'Client',
						dataIndex: 'spot_client'
					},
	
					{
						text     : 'Title',
						dataIndex: 'spot_title'
					}

				]
			},

			{
				text: '<b>Classic Spot</b>',
				flex: 1,
				columns: [

					{
						name	 : 'classic_media_id',
						text	 : 'Image',
						minWidth : 150,
						dataIndex: 'mediaId',
						renderer : this.imgRendererSubmissionSmall,
						scope: this
					},
	
					{
						text     : 'Client',
						dataIndex: 'classic_client'
					},
	
					{
						text     : 'Title',
						dataIndex: 'classic_title'
					}

				]
			},

			{
				text: '<b>Print Ad</b>',
				flex: 1,
				columns: [

					{
						name	 : 'print_media_id',
						text	 : 'Image',
						minWidth : 150,
						dataIndex: 'mediaId',
						renderer : this.imgRendererSubmissionSmall,
						scope: this
					},
	
					{
						text     : 'Client',
						dataIndex: 'print_client'
					},
	
					{
						text     : 'Title',
						dataIndex: 'print_title'
					}

				]
			},

			],
			tbar: [{
				xtype: 'pagingtoolbar',
				border: false,
				flex: 1,
				pageSize: 100,
				// store: store,
				displayInfo: true,
				plugins: Ext.create('Ext.ux.ProgressBarPager', {}),
				displayMsg: '{0} - {1} of {2}'
			}],
			xstore: {
				load: 	this.getAjaxPath('e_submissionOfTheDayX/load?dayx=2014-01-08'),
				pid: 	'SubmissionID',
				fields: fields
			},
			listeners: {
				scope: this,
				buffer: 1,
				itemdblclick: function(g,record) {
					// this.showSubmission(record.data.SubmissionID);
					this.openAdOfTheWeek();
				}
			}
		});

		gui.on('afterrender',function(){
			gui.getStore().load();
		},this);

		this.showContent(gui);
	},


	openAdOfTheWeek: function() {

		var items_left	= [

			this.searchCombo({
				fieldLabel: 'Client',
				name: 'spot_client',
				minChars: 3,
				searchScope: 'client'
			}),
	
			{
				fieldLabel: 'Title',
				name: 'spot_title',
				allowBlank: false,
				emptyText: 'Type to search ...'
			},
	
			{
				fieldLabel: 'Length',
				name: 'spot_length',
				allowBlank: false
			},
	
			{
				fieldLabel: 'Media ID',
				name: 'spot_MediaId',
				allowBlank: false,
				emptyText: 'Type to search ...'
			},
	
			this.searchCombo({
				fieldLabel: 'Submission ID',
				name: 'spot_submissionId',
				minChars: 3,
				emptyText: 'Type to search ...',
				searchScope: 'submissionID'
			}),
	
			{
				xtype: 'textareafield',
				fieldLabel: 'Text',
				name: 'spot_text',
				allowBlank: false
			}

		];


		var items_middle	= [

			this.searchCombo({
				name: 'classic_client',
				minChars: 3,
				allowBlank: false,
				searchScope: 'client'
			}),
	
			{
				name: 'classic_title',
				allowBlank: false,
				emptyText: 'Type to search ...'
			},
	
			{
				name: 'classic_length',
				allowBlank: false
			},
	
			{
				name: 'classic_MediaId',
				allowBlank: false,
				emptyText: 'Type to search ...'
			},
	
			this.searchCombo({
				name: 'classic_submissionId',
				minChars: 3,
				emptyText: 'Type to search ...',
				searchScope: 'submissionID'
			}),
	
			{
				xtype: 'textareafield',
				name: 'classic_text',
				allowBlank: false
			},

		];


		var items_right	= [

			this.searchCombo({
				name: 'print_client',
				minChars: 3,
				allowBlank: false,
				emptyText: 'Min 3 characters ...',
				searchScope: 'client'
			}),
	
			{
				name: 'print_title',
				allowBlank: false,
				emptyText: 'Min 3 characters ...'
			},
	
			{
				name: 'print_length',
				allowBlank: false
			},
	
			{
				name: 'print_MediaId',
				allowBlank: false
			},
	
			this.searchCombo({
				name: 'print_submissionId',
				minChars: 3,
				emptyText: 'Min 3 characters ...',
				searchScope: 'submissionID'
			}),
	
			{
				xtype: 'textareafield',
				name: 'print_text',
				allowBlank: false
			}

		];

		var tbarSub = Ext.create('Ext.toolbar.Toolbar', {
			items: [

				{
					text: 'Save',
					iconCls: 'xf_save'
				},
	
				{
					text: 'Close',
					iconCls: 'xf_abort',
					listeners: {
						click: function() {
	
						}
					}
				}

			]
		});

		var btn_id_save = Ext.id();

		var addPanel = Ext.create('Ext.form.Panel', {
			region: 'north',
			border: false,
			fieldDefaults: {
				msgTarget: 'side',
				labelWidth: 150
			},
			tbar: tbarSub,
			defaultType: 'textfield',
			defaults: {
				anchor: '100%'
			},
			items: [

				{
					xtype: 'container',
					anchor: '100%',
					layout:'column',
					bodyStyle:'padding:5px 5px 0',
	
					items:[
	
						{
							xtype: 'panel',
							title: 'Spot of the week',
							columnWidth:.4,
							layout: 'anchor',
							margin: '0, 20, 0, 0',
							defaults: {
								anchor: '100%',
								padding: '5px 5px 0'
							},
							defaultType: 'textfield',
							items: items_left
						},
		
						{
							xtype: 'panel',
							title: 'Classic of the week',
							margin: '0, 20, 0, 0',
							columnWidth:.3,
							layout: 'anchor',
							defaults: {
								anchor: '100%',
								padding: '5px 5px 0'
							},
							defaultType: 'textfield',
							items: items_middle
						},
		
						{
							xtype: 'panel',
							title: 'Print Ad of the week',
							columnWidth:.3,
							layout: 'anchor',
							defaults: {
								anchor: '100%',
								padding: '5px 5px 0'
							},
							defaultType: 'textfield',
							items: items_right
						}
	
					]
				}
			]
		});

		var gui = Ext.create('Ext.panel.Panel', {
			title: 'Edit Week - 2014/16',
			layout:'border',
			items: [addPanel]
		});

		this.showContent(gui);
	},


	searchCombo: function(cfg)
	{

		var model 	= Ext.id();
		var url 	= this.getAjaxPath('e_submissionSearchComboFor/'+cfg.searchScope);

		Ext.define(model, {
			extend: 'Ext.data.Model',
			proxy: {
				type: 'ajax',
				url : url,
				reader: {
					type: 'json',
					root: 'root',
					totalProperty: 'totalCount'
				}
			},

			fields: [
			{name: '_value', 	type: 'string'},
			{name: '_display',	type: 'string'}
			]

		});

		var pageSize = 10;

		var ds = Ext.create('Ext.data.Store', {
			pageSize: pageSize,
			model: model
		});

		return {
			minChars: cfg.minChars,
			fieldLabel: cfg.fieldLabel,
			name: cfg.name,
			emptyText: cfg.emptyText,
			xtype: 'combo',
			store: ds,
			cls: cfg.cls,
			flex: cfg.flex,

			displayField: '_display',
			valueField: '_value',

			typeAhead: true,
			hideTrigger: true,

			displayMsg: '{0} - {1} of {2}',
			//selectOnFocus: true,

			listConfig: {
				loadingText: 'searching...',
				emptyText: 'no matching records found.',
				getInnerTpl2: function() {
					return '<div class="search-item">' +
					'<h3><span>{[Ext.Date.format(values.lastPost, "M j, Y")]}<br />by {author}</span>{title}</h3>' +
					'{excerpt}' +
					'</div>';
				}
			},
			pageSize: pageSize,
			listeners: {
				select: function(combo, selection) {
					var post = selection[0];
					if (post) {

					}
				}
			}
		};

	},


	searchComboCrm: function(cfg)
	{

		var model 	= Ext.id();
		var url 	= this.getAjaxPath('e_crmSearchComboFor/'+cfg.searchScope);

		Ext.define(model, {
			extend: 'Ext.data.Model',
			proxy: {
				type: 'ajax',
				url : url,
				reader: {
					type: 'json',
					root: 'root',
					totalProperty: 'totalCount'
				}
			},

			fields: [
			{name: '_value', 	type: 'string'},
			{name: '_display',	type: 'string'}
			]

		});

		var pageSize = 10;

		var ds = Ext.create('Ext.data.Store', {
			pageSize: pageSize,
			model: model
		});

		return {
			minChars: cfg.minChars,
			fieldLabel: cfg.fieldLabel,
			name: cfg.name,
			emptyText: cfg.emptyText,
			xtype: 'combo',
			store: ds,

			displayField: '_display',
			valueField: '_value',

			typeAhead: true,
			hideTrigger: true,

			displayMsg: '{0} - {1} of {2}',
			//selectOnFocus: true,

			listConfig: {
				loadingText: 'searching...',
				emptyText: 'no matching records found.',
				getInnerTpl2: function() {
					return '<div class="search-item">' +
					'<h3><span>{[Ext.Date.format(values.lastPost, "M j, Y")]}<br />by {author}</span>{title}</h3>' +
					'{excerpt}' +
					'</div>';
				}
			},
			pageSize: pageSize,
			listeners: {
				select: function(combo, selection) {
					var post = selection[0];
					if (post) {

					}
				}
			}
		};

	},


	simplyCombo: function(cfg) {

		var ds = Ext.create('Ext.data.Store', {
			fields: ['k', 'v'],
			data : cfg.data
		});

		return {
			value: cfg.value,
			xtype: 'combo',
			width: cfg.width,
			fieldLabel: cfg.fieldLabel,
			name: cfg.name,
			store: ds,
			queryMode: 'local',
			displayField: 'v',
			valueField: 'k',
			listeners: cfg.listeners,
			multiSelect: cfg.multiSelect
			//selectOnFocus: true
		};

	},
	
	
	simplyComboAjax: function(cfg) {

		var ds = Ext.create('Ext.data.Store', {
			fields: ['k', 'v'],
			data : cfg.data
		});

		return {
			value: cfg.value,
			xtype: 'combo',
			width: cfg.width,
			fieldLabel: cfg.fieldLabel,
			name: cfg.name,
			store: ds,
			queryMode: 'local',
			displayField: 'v',
			valueField: 'k',
			listeners: cfg.listeners,
			multiSelect: cfg.multiSelect
			//selectOnFocus: true
		};

	},

	buildCreditForm: function(aux) {

		// direktes bearbeiten von credit doch nicht gewuenscht
		/* var aux2 = {
		xtype: 'button',
		name: 'credit-person',
		tooltip: 'Edit details',
		cls: 'xf_person',
		margin: '0, 0, 0, 1',
		width: 16,
		listeners: {
		scope: this,
		click: function() {
		this.showDialog('person');
		}
		}
		};

		var fieldContainer = new Ext.form.FieldContainer({layout:'hbox'});
		fieldContainer.add(aux, aux2); */

		return aux;
	},

	showDialog : function(which){

		var whichItems;

		switch(which)
		{

			case 'issue':
			whichItems = [

				{
				minHeight: 200,
				layout:'anchor',
				bodyStyle:'padding:10px',
				items: [

					this.simplyCombo({
						fieldLabel: 'Year',
						name: 'year',
						value: '',
						data: [{k:'2014',v:'2014'},{k:'2015',v:'2015'},{k:'2016',v:'2016'},{k:'2017',v:'2017'},{k:'2018',v:'2018'},{k:'2019',v:'2019'},{k:'2020',v:'2020'}]
					}),
	
					this.simplyCombo({
						fieldLabel: 'Issue',
						name: 'issue',
						value: '',
	
						data: [{k:'1',v:'1'},{k:'2',v:'2'},{k:'3',v:'3'},{k:'4',v:'4'},{k:'5',v:'5'},{k:'6',v:'6'}]
					}),
	
					{
						xtype: 'textareafield',
						fieldLabel: 'Notes',
						name: 'notes'
					},

				]

			}

			];
			break;

			case 'submission':
			whichItems = [

			{
				minHeight: 200,
				layout:'anchor',
				bodyStyle:'padding:10px',
				items: [

					this.simplyCombo({
						fieldLabel: 'Year',
						name: 'year',
						value: '',
						data: [{k:'2014',v:'2014'},{k:'2015',v:'2015'},{k:'2016',v:'2016'},{k:'2017',v:'2017'},{k:'2018',v:'2018'},{k:'2019',v:'2019'},{k:'2020',v:'2020'}]
					}),
	
					{
						xtype: 'textfield',
						fieldLabel: 'Name',
						name: 'name',
	
					},
	
					{
						xtype: 'textareafield',
						fieldLabel: 'Notes',
						name: 'notes',
					},

				]

			}

			];
			break;

			default:

		}

		var win = new Ext.Window({
			title: 'New',
			layout:'form',
			width:500,
			height:300,
			border: false,
			closeAction:'hide',
			defaults: {
				minHeight: 20,
				padding: 10
			},

			items: whichItems,

			buttons: [{
				text:'Submit',
				disabled:true
			},{
				text: 'Close',
				handler: function(){
					win.hide();
				}
			}]
		});

		win.show(this);

	},


	getTbarSub: function () {

		var tbarSub = [

		{
			text: 'Save',
			iconCls: 'xf_save',
			handler: function() {
				console.info("save..");
			},
		},

		{
			text: 'Close',
			iconCls: 'xf_abort',
			handler: function() {
				console.info("close..");
			},
		}
		];

		return tbarSub;

	},

	chooseImageField: function(cfg) {

		var label;

		if (typeof cfg !== 'undefined') {
			if (typeof cfg.fieldLabel !== 'undefined') {
				label = cfg.fieldLabel;
			}
			else {
				label = 'Image';
			}
			if (typeof cfg.name !== 'undefined') {
				name = cfg.name;
			}
			else {
				name = 'imagetest';
			}
		}

		return {
			emptyText: 'please choose image...',
			xtype: 'xr_field_file',
			fieldLabel: label,
			cls: 'imageContainerBox',
			name: name
		};
	},


	setLinkField: function(cfg) {

		if (typeof cfg !== 'undefined') {
			if (typeof cfg.name !== 'undefined') {
				name = cfg.name;
			}
			else {
				name = 'url';
			}
		}

		return {
			xtype: 'textfield',
			name: name,
			emptyText: 'http://',
			fieldLabel: 'Link',
			width: '100%'
		};
	},


	setStateField: function(cfg) {

		if (typeof cfg !== 'undefined') {
			if (typeof cfg.name !== 'undefined') {
				name = cfg.name;
			}
			else {
				name = 'state';
			}
		}

		return this.simplyCombo({
			fieldLabel: 'State',
			name: name,
			value: '',
			data: [{k:'',v:''},{k:'1',v:'Published'},{k:'2',v:'Pending Review'}, {k:'3',v:'Draft'}]
		});
	},


	shortDescriptionField: function(cfg) {

		if (typeof cfg !== 'undefined') {
			if (typeof cfg.name !== 'undefined') {
				name = cfg.name;
			}
			else {
				name = 'desc_short';
			}
		}

		return {
			xtype:'xr_field_html',
			name: name,
			fieldLabel: 'Short Description',
		
			height: 150
		};
	},


	longDescriptionField: function(cfg) {

		if (typeof cfg !== 'undefined') {
			if (typeof cfg.name !== 'undefined') {
				name = cfg.name;
			}
			else {
				name = 'desc_long';
			}
		}
		
		return {
			xtype:'xr_field_html',
			name: name,
			fieldLabel: 'Long Description',
			width: '100%'
		};
	},


	setNameField: function(cfg) {

		return {
			xtype: 'textfield',
			name: 'name',
			emptyText: '',
			fieldLabel: 'Name',
			width: 150
		};
	},


	publishStartField: function(cfg) {

		if (typeof cfg !== 'undefined') {
			if (typeof cfg.name !== 'undefined') {
				name = cfg.name;
			}
			else {
				name = 'date_start';
			}
		}

		return {
			xtype: 'datefield',
			emptyText: 'Pick date ...',
			fieldLabel: 'Publish Start',
			name: name
		};
	},


	publishEndField: function(cfg) {

		if (typeof cfg !== 'undefined') {
			if (typeof cfg.name !== 'undefined') {
				name = cfg.name;
			}
			else {
				name = 'date_end';
			}
		}

		return {
			xtype: 'datefield',
			emptyText: 'Pick date ...',
			fieldLabel: 'Publish End',
			name: name,
		};
	},


	keywordsField: function(cfg) {

		if (typeof cfg !== 'undefined') {
			if (typeof cfg.name !== 'undefined') {
				name = cfg.name;
			}
			else {
				name = 'keywords';
			}
		}

		return {
			xtype: 'textarea',
			fieldLabel: 'Keywords',
			name: name,
			width: 150
		};

	},


	titleField: function(cfg) {

		if (typeof cfg !== 'undefined') {
			if (typeof cfg.name !== 'undefined') {
				name = cfg.name;
			}
			else {
				name = 'date_end';
			}
			if (typeof cfg.name_keywords !== 'undefined') {
				name_keywords = cfg.name_keywords;
			}
			else {
				name_keywords = 'keywords';
				console.log ("kw undefined");
			}
		}

		return {
			xtype: 'fieldcontainer',
			layout: 'hbox',
			width: '100%',
			forceFit: true,
			defaultType: 'textfield',

			items: [

				{
					name: name,
					fieldLabel: 'Title',
					flex: 1,
				},
				{
					xtype: 'splitter',
					width: 20,
				},
				{
					xtype: 'textareafield',
					fieldLabel: 'Keywords',
					name: name_keywords,
					flex: 1,
				}

			]
		};
	},


	html2Field: function(cfg) {

		if (typeof cfg !== 'undefined') {
			if (typeof cfg.name_left !== 'undefined') {
				name_left = cfg.name_left;
			}
			else {
				name_left = 'col_left';
			}
			if (typeof cfg.name_right !== 'undefined') {
				name_right = cfg.name_right;
			}
			else {
				name_right = 'col_right';
			}
		}

		return {
			xtype: 'fieldcontainer',
			layout: 'column',
			width: '100%',
			items: [{
				xtype:'xr_field_html',
				cls: 'htmlEditor',
				columnWidth: 0.5,
				fieldLabel: 'Left',
				name: name_left,
			},{
				xtype: 'splitter',
				width:20
			},{
				xtype:'xr_field_html',
				cls: 'htmlEditor',
				columnWidth: 0.5,
				fieldLabel: 'Right',
				name: name_right
			}]
		};
	},


	textFieldPlus: function(cfg) {

		return {
			xtype: 'fieldcontainer',
			fieldLabel: cfg.fieldLabel,
			layout: 'column',
			forceFit: true,
			width: '96%',
			forceFit: true,
			defaultType: 'textfield',
			items: [

			{
				cls: cfg.cls,
				name: cfg.name,
				/* TODO chrome margin?
				* width?
				*/
				margin: '0, 0, 0, 3'
			},

			{
				xtype: 'button',
				iconCls: cfg.iconCls,
				text: cfg.buttonText,
				width: cfg.buttonWidth,
				listeners: {
					scope: this,
					click: function() {
						this.ìnsertAfterThis();
					}
				}
			},

			]
		};

	},


	insertAfterThis: function() {

	},

	searchContacts: function() {

		if (!this.initStorePersonCategories)
		{
			this.initStorePersonCategories = true;

			Ext.define('PersonCategories', {
				extend: 'Ext.data.Model',
				proxy: {
					type: 'ajax',
					url : this.getAjaxPath('crm_personCategories/load'),
					reader: {
						type: 'json',
						root: 'root',
						totalProperty: 'totalCount'
					}
				},

				fields: [
				{name: '_value', 	type: 'string'},
				{name: '_display',	type: 'string'}
				]

			});

			Ext.create('Ext.data.Store', {
				pageSize: 1000,
				model: 'PersonCategories',
				storeId: 'PersonCategories'
			});
		}


		var items_left	= [

			{
				fieldLabel: 'Overall',
				name: 'first',
				emptyText: 'Search in all Fields...'
			},
	
			this.simplyCombo({
				fieldLabel: 'Type?',
				name: 'type',
				value: '',
				data: [{k:'',v:'Ignore'},{k:'c',v:'Company'},{k:'p',v:'Person'}]
			}),
	
	
			this.searchComboCrm({
				fieldLabel: 'First name',
				name: 'first',
				minChars: 3,
				emptyText: 'Min 3 characters ...',
				searchScope: 'firstname'
			}),
	
			this.searchComboCrm({
				fieldLabel: 'Last name',
				name: 'last',
				minChars: 3,
				emptyText: 'Min 3 characters ...',
				searchScope: 'lastname'
			}),
	
			this.searchComboCrm({
				fieldLabel: 'Company',
				name: 'company',
				minChars: 3,
				emptyText: 'Min 3 characters ...',
				searchScope: 'companyname'
			}),
	
			this.searchComboCrm({
				fieldLabel: 'Position',
				name: 'company',
				minChars: 3,
				emptyText: 'Min 3 characters ...',
				searchScope: 'position'
			}),
	
			this.searchComboCrm({
				fieldLabel: 'Credited as',
				name: 'company',
				minChars: 3,

			}),
	
			{
				fieldLabel: 'Credited in',
				
			},
	
			this.searchComboCrm({
				fieldLabel: 'Country',
				name: 'company',
				minChars: 3,
				emptyText: 'Min 3 characters ...',
				searchScope: 'country'
			}),
	
			this.searchComboCrm({
				fieldLabel: 'City',
				name: 'company',
				minChars: 3,
				emptyText: 'Min 3 characters ...',
				searchScope: 'city'
			}),
	
			this.searchComboCrm({
				fieldLabel: 'E-Mail',
				name: 'company',
				minChars: 3,
				emptyText: 'Min 3 characters ...',
				searchScope: 'email'
			})

		];

		var items_right = [

			this.searchComboCrm({
				fieldLabel: 'Comments',
				name: 'company',
				minChars: 3,
			}),
	
			this.searchComboCrm({
				fieldLabel: 'Contact ID',
				name: 'id',
				minChars: 3,
				searchScope: 'id'
			}),
	
			{
				fieldLabel: 'Assigned to',
				name: 'assigned_to'
			},
	
			{
				xtype: 'fieldcontainer',
				fieldLabel: 'Created',
				labelStyle: 'font-weight:bold;padding:0;',
				layout: 'hbox',
				defaultType: 'textfield',
				items: [{
					xtype: 'datefield',
					flex: 1,
					name: 'firstName',
					emptyText: 'From'
				}, {
					xtype: 'datefield',
					flex: 1,
					name: 'lastName',
					emptyText: 'To',
					margins: '0 0 0 5'
				}]
			},
	
			{
				xtype: 'fieldcontainer',
				fieldLabel: 'Modified',
				labelStyle: 'font-weight:bold;padding:0;',
				layout: 'hbox',
				defaultType: 'textfield',
	
				items: [{
					xtype: 'datefield',
					flex: 1,
					name: 'firstName',
					emptyText: 'From'
				}, {
					xtype: 'datefield',
					flex: 1,
					name: 'lastName',
					emptyText: 'To',
					margins: '0 0 0 5'
				}]
			},
	
			{
				xtype: 'boxselect',
				fieldLabel: "Category",
				value: "WA",
				displayField: "_display",
				valueField: "_value",
				emptyText: "Pick categories",
				store: "PersonCategories",
				queryMode: "remote"
	
			},{
				xtype: 'splitter',
				height: 20
			},{
	
				xtype: 'button',
				text: 'Start search',
				height: 30,
				handler: function() {
					console.info("search contacts");
					
				}
			}
		];

		var searchPanel = Ext.create('Ext.form.Panel', {
			region: 'north',
			border: false,
			collapsible: true,

			bodyStyle:'padding:5px 5px 0',
			width: 350,
			fieldDefaults: {
				msgTarget: 'side',
				labelWidth: 150
			},
			defaultType: 'textfield',
			defaults: {
				anchor: '100%'
			},
			items: [{
				xtype: 'container',
				anchor: '100%',
				layout:'column',
				bodyStyle:'padding:5px 5px 0',
				items:[{
					xtype: 'container',
					columnWidth:.5,
					layout: 'anchor',
					defaults: {
						anchor: '96%'
					},
					defaultType: 'textfield',
					items: items_left
				},{
					xtype: 'container',
					columnWidth:.5,
					layout: 'anchor',
					defaults: {
						anchor: '96%'
					},
					defaultType: 'textfield',
					items: items_right
				}]
			}]
		});

		var fields =  [
		{name:'ec_id', 			text:'ID', 					type: 'int'},
		{name:'ec_firstname',	text:'Firstname',			type: 'string'},
		{name:'ec_lastname',	text:'Lastname', 			type: 'string'},
		{name:'ec_company',		text:'Company', 			type: 'string'},
		{name:'ec_city',		text:'City', 				type: 'string'},
		{name:'ec_country_id',	text:'Country', 			type: 'int'},
		{name:'ec_email',		text:'Email', 				type: 'string'},
		{name:'ec_phone',		text:'Phone Number', 		type: 'string'},
		{name:'ec_assignedTo',	text:'Assigned to', 		type: 'int'},
		];

		var contacts = xframe_pattern.getInstance().genGrid({
			region:'center',
			forceFit:true,
			border:false,
			title: 'Contacts',
			split: true,
			collapseMode: 'mini',
			button_del:true,
			button_add:true,
			search: true,
			pager: true,
			button_export: true,
			xstore: {
				load: 	this.getAjaxPath('crm_contacts/load'),
				pid: 	'ec_id',
				fields: fields
			},
			listeners: {
				scope: this,
				buffer: 1,
				itemdblclick: function(g,record) {
					this.openContact(record.data.ec_id);
				}
			}
		});

		contacts.on('afterrender',function(){
			contacts.getStore().load();
		},this);


		var gui = Ext.create('Ext.panel.Panel', {
			title: 'Search Contacts',
			layout:'border',
			items: [searchPanel,contacts]
		});

		this.showContent(gui);
	},


	searchSubmissions: function() {

		var items_left	= [
		
			{
				fieldLabel: 'Overall',
				name: 'first',
				emptyText: 'Search in all Fields...'
			},
	
			this.searchCombo({
				fieldLabel: 'Submitter',
				name: 'last',
				minChars: 3,
				emptyText: 'Min 3 characters ...',
				searchScope: 'submitter'
			}),
	
			this.searchCombo({
				fieldLabel: 'Submitted for',
				name: 'last',
				minChars: 1,
				emptyText: 'Min 1 characters ...',
				searchScope: 'kindOf'
			}),
	
			{
				fieldLabel: 'Credits',
				name: 'email'
			},
	
			this.searchCombo({
				fieldLabel: 'Agency',
				name: 'last',
				minChars: 3,
				emptyText: 'Min 3 characters ...',
				searchScope: 'agency'
			}),
	
			this.searchCombo({
				fieldLabel: 'Country',
				name: 'last',
				minChars: 3,
				emptyText: 'Min 3 characters ...',
				searchScope: 'country'
			}),
	
			this.searchCombo({
				fieldLabel: 'City',
				name: 'last',
				minChars: 3,
				emptyText: 'Min 3 characters ...',
				searchScope: 'city'
			}),
	
			this.searchCombo({
				fieldLabel: 'E-Mail',
				name: 'last',
				minChars: 3,
				emptyText: 'Min 3 characters ...',
				searchScope: 'email'
			}),
	
			this.searchCombo({
				fieldLabel: 'Comments',
				name: 'last',
				minChars: 3,
				emptyText: 'Min 3 characters ...',
				searchScope: 'comments'
			}),{
				fieldLabel: 'Category',
				name: 'email'
			}
		];

		var items_right	= [

			this.searchCombo({
				fieldLabel: 'Submission ID',
				name: 'last',
				minChars: 3,
				emptyText: 'Min 3 characters ...',
				searchScope: 'submissionID'
			}),
	
			{
				fieldLabel: 'Submitted from ',
				xtype: 'datefield',
				maxWidth: 300
			},{
				fieldLabel: 'Submitted to',
				xtype: 'datefield',
				maxWidth: 300
			},
	
			this.searchCombo({
				fieldLabel: 'Status',
				name: 'last',
				minChars: 1,
				emptyText: 'Min 1 characters ...',
				searchScope: 'submissionStatus'
			}),
	
			{
				fieldLabel: 'Credits',
				name: 'email'
			},
	
			this.simplyCombo({
				fieldLabel: 'Artwork?',
				name: 'artworkPresent',
				value: '',
				data: [{k:'',v:'Ignore'},{k:'n',v:'No'},{k:'y',v:'Yes'}]
			}),
	
			this.simplyCombo({
				fieldLabel: 'Credits?',
				name: 'creditsPresent',
				value: '',
				data: [{k:'',v:'Ignore'},{k:'n',v:'No'},{k:'y',v:'Yes'}]
			}),
	
			{
				fieldLabel: 'Issue',
				name: 'email'
			},
			
			{
				xtype: 'button',
				text: 'Start search',
				height: 30,
				handler: function() {
					console.info("ABCDEFGH");
				}
			}
		];

		var searchPanel = Ext.create('Ext.form.Panel', {
			region: 'north',
			border: false,
			bodyStyle:'padding:5px 5px 0',
			width: 350,
			collapsible: true,
			fieldDefaults: {
				msgTarget: 'side',
				labelWidth: 150
			},
			defaultType: 'textfield',
			defaults: {
				anchor: '100%'
			},
			items: [{
				xtype: 'container',
				anchor: '100%',
				layout:'column',
				bodyStyle:'padding:5px 5px 0',
				items:[{
					xtype: 'container',
					columnWidth:.3,
					layout: 'anchor',
					defaults: {
						anchor: '96%'
					},
					defaultType: 'textfield',
					items: items_left
				},{
					xtype: 'container',
					columnWidth:.3,
					layout: 'anchor',
					defaults: {
						anchor: '96%'
					},
					defaultType: 'textfield',
					items: items_right
				},{
					border: false,
					title: 'Suchstatistik',
					xtype: 'propertygrid',
					columnWidth:.4,
					anchor: '100%',
					source: {
					"Submissions": "100",
					"Kampangnen": "50",
					"Submitter": "40",
					"Submissions-Länder": "ARGENTINA(1), AUSTRALIA(5), AUSTRIA(19), BANGLADESH(11), BELGIUM(10), BOLIVIA(4), BRAZIL(3), CANADA(379), CHILE(117)",
					"Kampangnen-Länder": "HONG KONG(8), INDIA(3), INDONESIA(226), ISRAEL(3), ITALY(29), JAPAN(67), KAZAKHSTAN(33)",
					"Submitter-Länder": "PORTUGAL(1), PUERTO RICO(19), ROMANIA(7), RUSSIAN FEDERATION(4), SINGAPORE(7), SLOVAKIA(3)"
					}
				}]
			}]
		});

		/* var fields =  [
		{name:'mediaId', 		text:'Image', 			type: 'int', renderer: this.imgRendererSubmissionSmal, scope: this},
		{name:'SubmissionID', 	text:'ID', 				type: 'int'},
		{name:'KindOf',			text:'Submitted For', 	type: 'string'},
		{name:'Description',	text:'Status', 			type: 'string'},
		{name:'SubmittedBy',	text:'Submitted By', 	type: 'string'},
		{name:'mappedCredits',	text:'Credits', 		type: 'int'},
		{name:'highRes',		text:'HighRes', 		type: 'int', renderer: this.highResRender, scope: this},
		]; */
		
		var fields =  [
		{name:'es_id', 				text:'ID', 				type: 'int'},
		{name:'es_id', 				text:'Image', 			type: 'int', renderer: this.imgRendererSubmissionSmall, scope: this},
		{name:'es_state',			text:'State', 			type: 'int', renderer: this.submissionStateRender, scope: this},
		{name:'es_submittedFor',	text:'Submitted For', 	type: 'string'},
		{name:'es_submittedBy',		text:'Submitted By', 	type: 'string'},
		{name:'es_credits',			text:'Credits', 		type: 'string'},
		{name:'es_highResStatus',	text:'HighRes', 		type: 'string'},
		];

		var btn_id_bulk = Ext.id();
		var but_id_zip  = Ext.id();

		var submissions = xframe_pattern.getInstance().genGrid({
			region:'center',
			forceFit:true,
			border:false,
			title: 'Submission',
			split: true,
			collapseMode: 'mini',
			button_del:true,
			button_add:true,
			search: true,
			pager: true,

			button_export: true,
			selModelButtons:[btn_id_bulk,but_id_zip],
			toolbar_top: [{
				iconCls: 'xf_bulk',
				id: btn_id_bulk,
				disabled: true,
				text: 'Bulk Modification',
				menu: [{
					text: 'Change Status'
				},{
					text: 'Change Issue'
				}]
			},{
				disabled: true,
				id: but_id_zip,
				iconCls: 'xf_zip_file',
				text: 'Download Thumbnails'
			}],

			xstore: {
				load: 	this.getAjaxPath('e_submissionOfTheDayX/load?dayx='),
				pid: 	'SubmissionID',
				fields: fields
			},
			listeners: {
				scope: this,
				buffer: 1,
				itemdblclick: function(g,record) {
					this.showSubmission(record.data.SubmissionID);
				}
			}
		});

		submissions.on('afterrender',function(){
			submissions.getStore().load();
		},this);

		var gui = Ext.create('Ext.panel.Panel', {
			title: 'Search Submission',
			layout:'border',
			items: [searchPanel,submissions]
		});

		this.showContent(gui);
	},


	getMenuOE: function() {
		return xluerzer_oe.getInstance().getMenu();
	},


	getMenuE: function() {

		var menuItems = [

			{
				text:'Submissions',
				handler: this.showSubmissionsByDay,
				scope: this
			},
	
			{
				text:'Search Submissions',
				handler: this.searchSubmissions,
				scope: this
			},
			
			{
				text:'Search Students Submissions',
				handler: this.searchSubmissions,
				scope: this
			},
	
			{
				xtype:'text',
				text: '',
				cls: 'spacer'
			},
	
			{
				text:'Contacts',
				handler: this.searchContacts,
				scope: this
			},
	
			/* {
				text:'New Company',
				handler: this.newCompany,
				scope: this,
			},
	
			{
				text:'New Person',
				handler: this.newPerson,
				scope: this,
			}, */
	
			/* {
				text:'CSV Import',
				idx: -1
			},*/
	
			{
				xtype:'text',
				text: '',
				cls: 'spacer'
			},
	
			{
				text:'Ads of the Week',
				handler: this.showAdsOfTheWeekOverview,
				scope: this,
			},
	
			/* this.defaultAction({
			text:'Ads of the week',
			pid: 'id',
			fields: [{name:'s_id',text:'Status', width: 80,renderer: this.stateRender, scope: this},{name:'title',text:'Title'},{name:'created',text:'Created On', width: 80},{name:'keywords',text:'Keywords'},{name:'media_id',text:'Image',renderer: this.imgRendererOe_120x40, scope: this}],
			scopex: 'oe_adsoftheweek'
			}), */
	
			{
				xtype:'text',
				text: '',
				cls: 'spacer'
			},
	
			this.defaultAction({
				text:'Publishing',
				pid: 'id',
				fields: [{name:'s_id',text:'Status', width: 80,renderer: this.stateRender, scope: this},{name:'title',text:'Title'},{name:'created',text:'Created On', width: 80},{name:'keywords',text:'Keywords'},{name:'media_id',text:'Image',renderer: this.imgRendererOe_120x40, scope: this}],
				scopex: 'oe_magazines'
			}),
	
			{
				xtype:'text',
				text: '',
				cls: 'spacer'
			},
			
			{		
				text:'Digital',
				disabled: true
			},
	
			{
				xtype:'text',
				text: '',
				cls: 'spacer'
			},
	
			{
				text:'Mailings',
				disabled: true,
				idx: -1
			}
		];

		return menuItems;
	},


	getMenuAdmin: function() {

		var menuItems =  [

			{
				text:'BE User Settings',
				handler: this.showBeUsers,
				scope: this,
			},
			
			{
				text:'FE / Shop User',
				disabled: true,
			},
			
			{
				xtype:'text',
				text: '',
				cls: 'spacer'
			},
			
			{
				text: 'Preview Settings',
				disabled: true,
			},
			
			{
				text:'Submission Settings',
				// handler: this.showSubmissionSettings,
				// scope: this,
				menu: [
					{
						text: 'Submission categories',
						disabled: true,
					},
					{
						text: 'Submission credits',
						disabled: true,
					},
				] 
			},
			
			{
				text:'Data Setttings',
				idx: -1,
				menu: [
					{
						text: 'Contries',
						disabled: true,
					},
					{
						text: 'Categories',
						disabled: true,
					},
					{
						text: 'Salutations',
						disabled: true,
					},
					{
						text: 'Positions',
						disabled: true,
					},
					{
						text: 'Branches',
						disabled: true,
					}
				]
			},
	
			{
				xtype:'text',
				text: '',
				cls: 'spacer'
			},
	
			{
				text: 'Newsletter',
				menu: [
					{
						text:'NL Administration',
						disabled: true,
						idx: -1
					},
			
					{
						text:'NL Templates',
						disabled: true,
						idx: -1
					},
				]
			},
			
			
			{
				text: 'Voting',
				menu: [
					{
						text:'Voting Settings',
						disabled: true,
						idx: -1
					},
			
					{
						text:'voting Reports',
						disabled: true,
						idx: -1
					},
				]
			},
			
			
	
			{
				xtype:'text',
				text: '',
				cls: 'spacer'
			},
			
			{
				text:'Reminder',
				disabled: true,
			},
			
			{
				xtype:'text',
				text: '',
				cls: 'spacer'
			},
			
			{
				text:'Logs',
				idx: -1,
				menu: [
					{
						text: 'Access log',
						disabled: true,
					},
					{
						text: 'BE log',
						disabled: true,
					},
					{
						text: 'FE log',
						disabled: true,
					}				
				]
			},
			
			{
				text:'URL Mapper',
				disabled: true,
			},
			
			{
				text:'IP Datenbank',
				disabled: true,
			}

		];

		return menuItems;
	},


	getMenuStats: function() {

		var menuItems =  [

			{
				text:'Video Encoder',
				disabled: true,
				idx: -1
			},
			
			{
				text:'Uploads S3',
				disabled: true,
				idx: -1
			},
			
			{
				text:'Magazine',
				idx: -1,
				menu: [
					{
						text:'Storage',
						disabled: true,
						idx: -1
					},
					{
						text:'HighRes',
						disabled: true,
						idx: -1
					},
				]
				
			},
			
			{
				text:'Live Syncer',
				disabled: true,
				idx: -1
			},
			
			{
				text:'S3 Stats',
				disabled: true,
				idx: -1
			},
			
			{
				text:'Ranking Exclusion',
				disabled: true,
			}

		];

		return menuItems;
	},


	getExampleToday: function() {

		var items = [

			{
				html: '<b>Title</b><br /><br />Go to submission',
				cls: 'auxSubm1',
			},
	
			{
				html: '<b>Title</b><br /><br />Go to submission',
				cls: 'auxSubm2',
			},
	
			{
				html: '<b>Title</b><br /><br />Go to submission',
				cls: 'auxSubm3',
			},
	
			{
				html: '<b>Title</b><br /><br />Go to submission',
				cls: 'auxSubm2',
			},
	
			{
				html: '<b>Title</b><br /><br />Go to submission',
				cls: 'auxSubm1',
			}

		];

		// return items;
	},


	getExampleTodayProfiles: function() {

		var items = [

			{
				html: '<b>Andreas Meades </b><br /><br />Go to profile',
			},
	
			{
				html: '<b>Tessa Traeger</b><br /><br />Go to profile',
			},
	
			{
				html: '<b>Andreas Meades </b><br /><br />Go to profile',
			},
	
			{
				html: '<b>Tessa Traeger</b><br /><br />Go to profile',
			}

		];

		// return items;
	},



	showDesktop : function() {

		this.masterTab = Ext.create('Ext.tab.Panel', {
			region: 'center',
			scope: this,
			cls: 'luerzer',
			items: [{
				title: 'Welcome',
				closable: false,

				anchor: '100%',
				layout:'column',
				bodyStyle:'padding:40px 5px 0',

				items:[

					{
						xtype: 'panel',
						title: 'Online Editorial',
						columnWidth:.2,
						layout: 'anchor',
						margin: '0, 20, 0, 0',
						border: false,
	
						defaults: {
							anchor: '100%',
							padding: '6px 5px',
							margin: '10px 0 0 0'
						},
						defaultType: 'button',
						items: this.getMenuOE()
					},
	
					{
						xtype: 'panel',
						title: 'Editorial',
						margin: '0, 20, 0, 0',
						columnWidth:.2,
						layout: 'anchor',
						border: false,
	
						defaults: {
							anchor: '100%',
							padding: '6px 5px',
							margin: '10px 0 0 0'
						},
						defaultType: 'button',
						items: this.getMenuE()
					},
	
					{
						xtype: 'panel',
						title: 'Admin',
						margin: '0, 20, 0, 0',
						columnWidth:.2,
						layout: 'anchor',
						border: false,
	
						defaults: {
							anchor: '100%',
							padding: '6px 5px',
							margin: '10px 0 0 0'
						},
						defaultType: 'button',
						items: this.getMenuAdmin()
					},
	
					{
						xtype: 'panel',
						title: 'Today\'s Submissions',
						columnWidth:.2,
						layout: 'anchor',
						border: false,
						defaults: {
							anchor: '100%',
							padding: '6px 5px',
							margin: '10px 0 0 0',
							border: false,
						},
						defaultType: 'container',
						items: this.getExampleToday()
					},
	
					{
						xtype: 'panel',
						title: 'Recent changed Profiles',
						columnWidth:.2,
						layout: 'anchor',
						border: false,
						defaults: {
							anchor: '100%',
							padding: '6px 5px',
							margin: '10px 0 0 0',
							border: false,
						},
						defaultType: 'container',
						items: this.getExampleTodayProfiles()
					}

				]
			}]
		});

		this.wb = Ext.widget({
			tbar: [

				'<div style="min-wdith: min-width: 120px; min-height: 65px;	margin-right: 60px;"><div class="logo"><img src="/xgo/xplugs/xluerzer/media/img/logo.png" width="120" height="65" /></div></div>',
	
				{
					text:'Online Editorial',
					margin: '0 20 0 0',
					scope: this,
	
					menu: {
						cls: 'luerzer',
						items: this.getMenuOE()
					}
				},
	
				{
					text:'Editorial',
					margin: '0 20 0 0',
					scope: this,
	
					menu: {
						cls: 'luerzer',
						items: this.getMenuE()
					}
				},
	
				{
					text:'Admin',
					margin: '0 20 0 0',
					scope: this,
	
					menu: {
						cls: 'luerzer',
						items: this.getMenuAdmin()
					}
				},
				
				{
					text:'Stats',
					margin: '0 20 0 0',
					scope: this,
	
					menu: {
						cls: 'luerzer',
						items: this.getMenuStats()
					}
				},
				
				{
					text:'Help',
					idx: -1
				},
				
				{
					text: '<b>Exit</b>',
					handler: function() {
						top.logoff();
					}
				}
			],

			xtype: 'panel',
			region: 'center',
			layout: 'fit',
			items: [this.masterTab]
		});

		this.wb.on('afterrender',function(){
			// this.openSubmissionsDay('2014-04-04')
			// this.searchSubmission();
			// this.showSubmission(239185);
			// this.showBlogpost(16);
		},this,{buffer:10});

		var viewport = Ext.create('Ext.Viewport', {
			layout: {
				type: 'border'
			},
			defaults: {
				split: true
			},
			items: [this.wb]
		});
	},



/*************************************************************** submissions BEGIN **********************************************************/
	
	showSubmissionsByDay: function() {

		var selModel = Ext.create('Ext.selection.CheckboxModel', {
			singleSelect: true,
			checkOnly: false,
			forceFit: true,
			autoScroll: true,
			listeners: {
				selectionchange: function(sm, selections) {
				}
			}
		});

		var fields= [
			{name: 'dayx', 						type: 'string'},
			{name: 'total_submissions',     	type: 'int'},
			{name: 'total_submitter',       	type: 'int'},
			{name: 'total_print',       		type: 'int'},
			{name: 'total_print_submitter', 	type: 'int'},
			{name: 'total_tv',       			type: 'int'},
			{name: 'total_tv_submitter',    	type: 'int'},
			{name: 'total_specials',       		type: 'int'},
			{name: 'total_specials_submitter',  type: 'int'},
			{name: 'total_students',       		type: 'int'},
			{name: 'total_students_submitter',  type: 'int'}
		];

		var store = xframe.getGridStoreByConfig({
			xstore: {
				load: 	this.getAjaxPath('e_submissions_day_overview/load'),
				pid: 	'es_id',
				fields: fields,
				params: {}
			}
		});

		var submissionGrid = Ext.create('Ext.grid.Panel', {
			border: false,
			store: store,
			forceFit: true,
			pager: true,
			columnLines: true,
			columns: [

				{
					text: 'Date',
					maxWidth: 75,
					dataIndex: 'dayx'
				},
	
				{
					text: '<b>Total</b>',
					flex: 1,
					columns: [{
						text     : 'Submissions',
						dataIndex: 'total_submissions'
					}, {
						text     : 'Submitter',
						dataIndex: 'total_submitter'
					}]
				},
	
				{
					text: '<b>Print</b>',
					flex: 1,
					columns: [{
						text     : 'Submissions',
						dataIndex: 'total_print'
					}, {
						text     : 'Submitter',
						dataIndex: 'total_print_submitter'
					}]
				},
	
				{
					text: '<b>TV</b>',
					flex: 1,
					columns: [{
						text     : 'Submissions',
						dataIndex: 'total_tv'
					}, {
						text     : 'Submitter',
						dataIndex: 'total_tv_submitter'
					}]
				},
	
				{
					text: '<b>Specials</b>',
					flex: 1,
					columns: [{
						text     : 'Submissions',
						dataIndex: 'total_specials'
					}, {
						text     : 'Submitter',
						dataIndex: 'total_specials_submitter'
					}]
				},
	
				{
					text: '<b>Students</b>',
					flex: 1,
					columns: [
					{
						text     : 'Submissions',
						dataIndex: 'total_students'
					},
	
					{
						text     : 'Submitter',
						dataIndex: 'total_students_submitter'
					}
					]
				}
			],
			title: 'Submissions Day Overview',
			viewConfig: {
				stripeRows: true
			},
			tbar: [{
				xtype: 'pagingtoolbar',
				border: false,
				flex: 1,
				pageSize: 100,
				store: store,
				displayInfo: true,
				plugins: Ext.create('Ext.ux.ProgressBarPager', {}),
				displayMsg: '{0} - {1} of {2}'
			}],
			bbar: [{
				xtype: 'pagingtoolbar',
				border: false,
				flex: 1,
				pageSize: 100,
				store: store,
				displayInfo: true,
				plugins: Ext.create('Ext.ux.ProgressBarPager', {}),
				displayMsg: '{0} - {1} of {2}'
			}],
			listeners: {
				scope: this,
				buffer: 1,
				afterrender:function() {
					store.load();
				},
				itemdblclick: function(g,record) {
					this.openSubmissionsDay(record.data.dayx);
				}
			}
		});

		this.showContent(submissionGrid);
	},
	
	
	openSubmissionsDay: function(dayx) {

		var tbar = Ext.create('Ext.toolbar.Toolbar', {
			items  : [

			{
				text: 'Print',
				iconCls: 'xf_print'
			},

			{
				text: 'TV',
				iconCls: 'xf_tv'
			},

			{
				text: 'Students Contest',
				iconCls: 'xf_students'
			},

			{
				text: 'Specials',
				iconCls: 'xf_special'
			},

			{
				text: 'LowRes',
				iconCls: 'xf_download'
			},

			{
				text: 'HighRes',
				iconCls: 'xf_download'
			}

			]
		});

		var fields =  [
		{name:'es_id', 				text:'ID', 				type: 'int'},
		{name:'es_id', 				text:'Image', 			type: 'int', renderer: this.imgRendererSubmissionSmall, scope: this},
		{name:'es_state',			text:'State', 			type: 'int', renderer: this.submissionStateRender, scope: this},
		{name:'es_submittedFor',	text:'Submitted For', 	type: 'string'},
		{name:'es_submittedBy',		text:'Submitted By', 	type: 'string'},
		{name:'es_credits',			text:'Credits', 		type: 'string'},
		{name:'es_highResStatus',	text:'HighRes', 		type: 'string'},
		];

		var gui = xframe_pattern.getInstance().genGrid({
			region:'center',
			forceFit:true,
			border:false,
			title: 'Submissions Overview of '+ dayx,
			split: true,
			collapseMode: 'mini',
			tbar: tbar,
			button_del:true,
			button_add:true,
			search: true,
			pager: true,
			xstore: {
				load: 	this.getAjaxPath('e_submissionOfTheDayX/load?dayx='+dayx),
				pid: 	'es_id',
				fields: fields
			},
			listeners: {
				scope: this,
				buffer: 1,
				itemdblclick: function(g,record) {
					this.showSubmissionNew(record.data.es_id);
				}
			},
			
			
		});

		gui.on('afterrender',function(){
			gui.getStore().load();
		},this);

		this.showContent(gui);
	},

	
	
	
	
	showSubmissionNew: function(id) {
	
		var me = this;
	
		// switch depending on student or normal submission
		var prefix = "es_";
			
			var submissionDetailsLeft =  Ext.create('Ext.form.Panel', {
				xtype: 'form',
				autoScroll: true,
				flex: 1,
				defaultType: 'textfield',
				region: 'west',
				cls: 'innen-content',
				border: false,
				split: {size: 10},
	
	
				fieldDefaults: {
					labelAlign: 'top',
					msgTarget: 'side',
					padding: 0
				},
	
				items: [
						
						{
							fieldLabel: 'Submission ID',
							name: prefix+'id',
							disabled: true,
						},
						
						{
							fieldLabel: 'Submitted',
							name: prefix+'created',
							disabled: true,
						},
				
						{
							fieldLabel: 'Submitted by',
							name: prefix+'submittedBy',
							disabled: true
						},
				
						{
							fieldLabel: 'Country',
							name: prefix+'country_id',
							disabled: true
						},
				
						{
							fieldLabel: 'City',
							name: prefix+'city',
							disabled: true
						},
				
						{
							fieldLabel: 'Adress',
							name: prefix+'address',
							disabled: true
						},
				
						{
							fieldLabel: 'Phone',
							name: prefix+'phone',
							disabled: true
						},
	
				]
			});
	
	
			var submissionDetailsRight	= Ext.create('Ext.form.Panel', {
				xtype: 'form',
				autoScroll: true,
				flex: 1,
				defaultType: 'textfield',
				region: 'center',
				cls: 'innen-content',
				border: false,
				split: {size: 10},
	
				fieldDefaults: {
					labelAlign: 'top',
					msgTarget: 'side',
					padding: 0
				},
	
				items: [
				
					{
						fieldLabel: 'Email',
						name: prefix+'email',
						allowBlank: false
					},
	
					this.simplyCombo({
						fieldLabel: 'Submitted for',
						name: prefix+'submittedFor',
						value: '',
						data: [{k:'',v:''},{k:'Magazine',v:'Print'},{k:'Commercial',v:'TV'},{k:'student-print',v:'Students Contest'},{k:'Specials',v:'Specials'}]
					}),
			
					this.simplyCombo({
						fieldLabel: 'Status',
						name: prefix+'state',
						data: [{k:'1',v:'Submitted'}, {k:'2',v:'Waiting for credits'}, {k:'3',v:'Not selected'}, {k:'4',v:'Preselected'}, {k:'5',v:'Selected'}, {k:'6',v:'Error / No image'}, {k:'7',v:'Pending'}, {k:'8',v:'Withdrawn'}]
					}),
			
					this.simplyCombo({
						fieldLabel: 'Ad of the Week',
						name: prefix+'adoftheweek',
						value: '',
						data: [{k:'',v:'-'}, {k:'2014-14',v:'2014-14'}, {k:'2014-15',v:'2014-15'}, {k:'2014-16',v:'2014-16'}]
					}),
			
					{
						fieldLabel: 'QR Code',
						name: prefix+'qr',
					},
			
					{
						xtype: 'textareafield',
						fieldLabel: 'Comments',
						name: prefix+'comments'
					}
	
				]
			});
		
			
			
			var submissionDetailsBottomLeft = Ext.create('Ext.form.Panel', {
				xtype: 'form',
				autoScroll: true,
				flex: 1,
				defaultType: 'textfield',
				region: 'west',
				cls: 'innen-content',
				border: false,
				split: {size: 10},
	
				fieldDefaults: {
					labelAlign: 'top',
					msgTarget: 'side',
					padding: 0
				},
	
				items: [
			
					{
						xtype: 'box',
						html: 'bilder video etc'
					},
				]
			});
	
	
			var creditsGrid = xframe_pattern.getInstance().genGrid({
				region:'center',
				border:false,
				split: true,
				collapseMode: 'mini',
				button_del:true,
				button_add:true,
				search: true,
				pager: true,
				xstore: {

					load: 	this.getAjaxPath('e_submissioncredits_details/load/'+id),
					remove: this.getAjaxPath('e_submissioncredits/remove'),
					update: this.getAjaxPath('e_submissioncredits_details/update'),
					insert: this.getAjaxPath('e_submissioncredits/insert'),
					move: 	this.getAjaxPath('e_submissioncredits/move'),
										
		
					pid: 	'esc_id',
		
					fields: [
					{name:'ct_symbol',		text:'', 				type: 'string'},
					{name:'ct_description',	text:'Credit', 			type: 'string'},
					{name:'esc_firstname',	text:'First Name', 		type: 'string'},
					{name:'esc_lastname',	text:'Last Name', 		type: 'string'},
					{name:'esc_company',	text:'Company', 		type: 'string'},
					],
				},
				listeners: {
					scope: this,
					buffer: 1,
					itemdblclick: function(g,record) {
						// this.showSubmission(record.data.SubmissionID);
					}
				},
				
			});
			
			creditsGrid.on('afterrender',function(){
				creditsGrid.getStore().load();
			},this);
	
	
	
			var submissionDetailsBottomRight = Ext.create('Ext.form.Panel', {
				xtype: 'form',
				autoScroll: true,
				flex: 1,
				defaultType: 'textfield',
				region: 'center',
				border: false,
				split: {size: 10},
	
				fieldDefaults: {
					labelAlign: 'top',
					msgTarget: 'side',
					padding: 0
				},
	
				items: [creditsGrid]
			});
			
			
			
			var submissionDetailsBottom	= Ext.create('Ext.form.Panel', {
				xtype: 'form',
				
				flex: 1,
				defaultType: 'textfield',
				region: 'south',
				layout: 'border',
				border: false,
				split: {size: 10},
	
				fieldDefaults: {
					labelAlign: 'top',
					msgTarget: 'side',
					padding: 0
				},
	
				items: [submissionDetailsBottomLeft, submissionDetailsBottomRight]
			});
				
	
	
			var guiDetails = Ext.create('Ext.form.Panel', {
				title: 'Details',
				xtype: 'panel',
				layout: 'border',
				autoscroll: true,
				border: false,
				
				tbar: [
					
					{
						text: 'Save',
						iconCls: 'xf_save',
						scope: this,
						handler: function() {
							var values = submissionDetailsLeft.getForm().getValues();
							Ext.apply(values, submissionDetailsRight.getForm().getValues());
							saveData(values);
						},
					},
					
					{
						text: 'Print',
						iconCls:'xf_printer',
					},
		
					{
						text: 'Notify Submitter',
						iconCls:'xf_mail',
						handler: function(){
							scope: this,
							this.notifySubmitter
						}
					},
		
					{
						text: 'Previous',
						iconCls:'xf_arrow_left',
						handler: function(){
							scope: this,
							this.switchSubmission(id, 'prev')
						}
		
					},
		
					{
						text: 'Next',
						iconCls:'xf_arrow_right',
						handler: function(){
							scope: this,
							this.switchSubmission(id, 'next')
						}
					}
					
				],
					
				fieldDefaults: {
					labelAlign: 'top',
					msgTarget: 'side',
					anchor: '96%',
					padding: 0,
					border: false
				},
				items: [submissionDetailsLeft, submissionDetailsRight, submissionDetailsBottom]
			});
			
			var guiS2B = Ext.create('Ext.form.Panel', {
				title: 'Submitter to Backend'
			});
			
			var guiOriginal = Ext.create('Ext.form.Panel', {
				title: 'Original submitted data'
			});
			
			var gui = Ext.create('Ext.tab.Panel', {
	
					title: 'Edit Submission - ID: '+id,	
					items:[guiDetails, guiS2B, guiOriginal]
						
			});
			
			loadData = function()
			{
				console.info("id", id)
				gui.mask('Loading Data ...');
				xframe.ajax({
					scope: me,
					url: me.getAjaxPath('e_submission_details/load/'+id),
					params : {
					},
					stateless: function(success, json)
					{
						gui.unmask();
						if (!success) return;
	
						submissionDetailsLeft.getForm().setValues(json);
						submissionDetailsRight.getForm().setValues(json);
					}
				});
			},
			
			saveData = function(values)
			{
				gui.mask('Saving Data ...');
				xframe.ajax({
					scope: me,
					type: 'post',
					jsonData: values,
					url: me.getAjaxPath('e_submission_details/save/'+id),
					params : {
					},
					stateless: function(success, json)
					{
						gui.unmask();
						if (!success);
	
						submissionDetailsLeft.getForm().setValues(json);
						submissionDetailsRight.getForm().setValues(json);
					}
				});
			},
			
			gui.on('afterrender',function(){
				loadData();
			},this,{buffer:1});


			this.showContent(gui);

	},
	
	
	
	
	
	
	
	
	
	

/*************************************************************** submissions END **********************************************************/	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
/*************************************************************** do not look beyond this line... **********************************************************/	
	
	

	showSubmission: function(id) {

		/******************************************************************* submitter 2 backend BEGIN *************************************************************/
		var submitterBackend = Ext.create('Ext.form.Panel', {
			region: 'north',
			border: false,
			title: '',
			bodyStyle:'padding:5px 5px 0',
			forceFit: true,
			overflowY: 'auto',
			fieldDefaults: {
				msgTarget: 'side',
				labelWidth: 150
			},
			defaultType: 'textfield',
			defaults: {
				anchor: '100%'
			},
			items: [

			{
				xtype: 'container',
				anchor: '100%',
				title: 'Submitter 2 backend',
				border: false,
				minHeight: 400,
				collapsible: true,
				layout:'column',
				margin: '30, 0, 0, 0',
				bodyStyle:'padding:5px 5px 0',

				items: [

				{
					xtype: 'container',
					columnWidth:.4,
					layout: 'anchor',
					defaults: {
						anchor: '96%'
					},
					defaultType: 'textfield',
					items: [

						{
							xtype: 'container',
							html: '<b>Submission DB:</b><br /><br /><br />',
						},
	
						this.simplyCombo({
							fieldLabel: 'Salutation',
							name: 'salutation',
							value: '',
							data: [{k:'',v:''},{k:'mrs',v:'Mrs'},{k:'ms',v:'Ms'}, {k:'mr',v:'Mr'}]
						}),

						{
							fieldLabel: 'Firstname',
							name: 'firstname',
							minChars: 3,
						},
	
						{
							fieldLabel: 'Middlename',
							name: 'middlename',
							minChars: 3,
						},
	
						this.simplyCombo({
							fieldLabel: 'Company',
							name: 'company',
							value: '',
							data: [{k:'',v:''}]
						}),
	
						this.simplyCombo({
							fieldLabel: 'Position',
							name: 'position',
							value: '',
							data: [{k:'',v:''}]
						}),
	
						this.simplyCombo({
							fieldLabel: 'Represented by',
							name: 'represented_by',
							value: '',
							data: [{k:'',v:''}]
						}),

						{
							fieldLabel: 'Country',
							name: 'country',
							minChars: 3,
						},
	
						{
							fieldLabel: 'City',
							name: 'city',
							minChars: 3,
						},
	
						{
							fieldLabel: 'Adress',
							name: 'adress',
							minChars: 3,
						},
	
						{
							fieldLabel: 'Phone',
							name: 'phone',
							minChars: 3,
						},
	
						{
							fieldLabel: 'Fax',
							name: 'fax',
							minChars: 3,
	
						},
	
						{
							fieldLabel: 'Email',
							name: 'email',
							minChars: 3,
						},
	
						{
							xtype: 'container',
							html: '&nbsp;</b><br /><br /><br />',
						},

						this.searchCombo({
							fieldLabel: 'Load from Submissions',
							name: 'loadSubmission',
							minChars: 3,
							allowBlank: false,
							emptyText: 'Search Name / City / ...',
							searchScope: 'credit_client'
						}),

					]

				},

				{
					xtype: 'container',
					columnWidth:.05,
					layout: 'anchor',
					defaultType: 'textfield',
					
					items: [

						{
							xtype: 'container',
							html: '&nbsp;</b><br /><br /><br />',
						},
	
						{
							xtype: 'button',
							text: '<-',
							cls: 'switchButton',
							width: 50,
						},
	
						{
							xtype: 'button',
							text: '<-',
							cls: 'switchButton',
							width: 50,
						},
	
						{
							xtype: 'button',
							text: '<-',
							cls: 'switchButton',
							width: 50,
						},
	
						{
							xtype: 'button',
							text: '<-',
							cls: 'switchButton',
							width: 50,
						},
	
						{
							xtype: 'button',
							text: '<-',
							cls: 'switchButton',
							width: 50,
						},
	
						{
							xtype: 'button',
							text: '<-',
							cls: 'switchButton',
							width: 50,
						},
	
						{
							xtype: 'button',
							text: '<-',
							cls: 'switchButton',
							width: 50,
						},
	
						{
							xtype: 'button',
							text: '<-',
							cls: 'switchButton',
							width: 50,
						},
	
						{
							xtype: 'button',
							text: '<-',
							cls: 'switchButton',
							width: 50,
						},
	
						{
							xtype: 'button',
							text: '<-',
							cls: 'switchButton',
							width: 50,
						},
	
						{
							xtype: 'button',
							text: '<-',
							cls: 'switchButton',
							width: 50,
						},
	
						{
							xtype: 'button',
							text: '<-',
							cls: 'switchButton',
							width: 50,
						},

					]

				},

				{
					xtype: 'container',
					columnWidth:.05,
					layout: 'anchor',
					defaults: {
					},
					defaultType: 'textfield',
					items: [

						{
							xtype: 'container',
							html: '&nbsp;</b><br /><br /><br />',
						},
	
						{
							xtype: 'button',
							text: '->',
							cls: 'switchButton',
							width: 50,
						},
	
						{
							xtype: 'button',
							text: '->',
							cls: 'switchButton',
							width: 50,
						},
	
						{
							xtype: 'button',
							text: '->',
							cls: 'switchButton',
							width: 50,
						},
	
						{
							xtype: 'button',
							text: '->',
							cls: 'switchButton',
							width: 50,
						},
	
						{
							xtype: 'button',
							text: '->',
							cls: 'switchButton',
							width: 50,
						},
	
						{
							xtype: 'button',
							text: '->',
							cls: 'switchButton',
							width: 50,
						},
	
						{
							xtype: 'button',
							text: '->',
							cls: 'switchButton',
							width: 50,
						},
	
						{
							xtype: 'button',
							text: '->',
							cls: 'switchButton',
							width: 50,
						},
	
						{
							xtype: 'button',
							text: '->',
							cls: 'switchButton',
							width: 50,
						},
	
						{
							xtype: 'button',
							text: '->',
							cls: 'switchButton',
							width: 50,
						},
	
						{
							xtype: 'button',
							text: '->',
							cls: 'switchButton',
							width: 50,
						},
	
						{
							xtype: 'button',
							text: '->',
							cls: 'switchButton',
							width: 50,
						},

					]

				},

				{
					xtype: 'container',
					columnWidth:.4,
					layout: 'anchor',
					defaults: {
						anchor: '96%'
					},
					defaultType: 'textfield',
					items: [

						{
							xtype: 'container',
							html: '<b>Contacts DB:</b><br /><br /><br />',
						},
	
						this.simplyCombo({
							fieldLabel: 'Salutation',
							name: 'salutation',
							value: '',
							data: [{k:'',v:''},{k:'mrs',v:'Mrs'},{k:'ms',v:'Ms'}, {k:'mr',v:'Mr'}]
						}),
	
						{
							fieldLabel: 'Firstname',
							name: 'firstname',
							minChars: 3,
						},
	
						{
							fieldLabel: 'Middlename',
							name: 'middlename',
							minChars: 3,
						},
	
						this.simplyCombo({
							fieldLabel: 'Company',
							name: 'company',
							value: '',
							data: [{k:'',v:''}]
						}),
	
						this.simplyCombo({
							fieldLabel: 'Position',
							name: 'position',
							value: '',
							data: [{k:'',v:''}]
						}),
	
						this.simplyCombo({
							fieldLabel: 'Represented by',
							name: 'represented_by',
							value: '',
							data: [{k:'',v:''}]
						}),
	
						{
							fieldLabel: 'Country',
							name: 'country',
							minChars: 3,
						},
	
						{
							fieldLabel: 'City',
							name: 'city',
							minChars: 3,
						},
	
						{
							fieldLabel: 'Adress',
							name: 'adress',
							minChars: 3,
						},
	
						{
							fieldLabel: 'Phone',
							name: 'phone',
							minChars: 3,
						},
	
						{
							fieldLabel: 'Fax',
							name: 'fax',
							minChars: 3,
						},
	
						{
							fieldLabel: 'Email',
							name: 'email',
							minChars: 3,
						},
	
						{
							xtype: 'container',
							html: '&nbsp;</b><br /><br /><br />',
						},
	
						this.searchCombo({
							fieldLabel: 'Load from Contacts',
							name: 'loadSubmission',
							minChars: 3,
							allowBlank: false,
							emptyText: 'Search Name / City / ...',
							searchScope: 'credit_client'
						}),

					]
				}
				]
			}

			]
		});

		/******************************************************************* submitter 2 backend END *************************************************************/


		/******************************************************************* submission detail BEGIN *************************************************************/
		
		var prefix = "es_";
		
		var submissionDetailsLeft = [
	
			{
				fieldLabel: 'Email',
				name: prefix+'email',
				allowBlank: false
			},
			
			this.simplyCombo({
				fieldLabel: 'Submitted for',
				name: prefix+'submittedFor',
				disabled: true,
				data: [{k:'',v:''},{k:'Magazine',v:'Print'},{k:'Commercial',v:'TV'},{k:'student-print',v:'Students Contest'},{k:'Specials',v:'Specials'}]
			}),
	
			{
				fieldLabel: 'Submission ID',
				name: prefix+'id',
				disabled: true,
			},
			
			{
				fieldLabel: 'Submitted',
				name: prefix+'created',
				disabled: true,
			},
	
			{
				fieldLabel: 'Submitted by',
				name: prefix+'submittedBy',
				disabled: true
			},
	
			{
				fieldLabel: 'Country',
				name: prefix+'country',
				disabled: true
			},
	
			{
				fieldLabel: 'City',
				name: prefix+'city',
				disabled: true
			},
	
			{
				fieldLabel: 'Adress',
				name: prefix+'adress',
				disabled: true
			},
	
			{
				fieldLabel: 'Phone',
				name: prefix+'phone',
				disabled: true
			},
	

		];


		var submissionDetailsRight	= [

			this.simplyCombo({
				fieldLabel: 'Submitted for',
				name: prefix+'submittedFor',
				value: '',
				data: [{k:'',v:''},{k:'Magazine',v:'Print'},{k:'Commercial',v:'TV'},{k:'student-print',v:'Students Contest'},{k:'Specials',v:'Specials'}]
			}),
	
			this.simplyCombo({
				fieldLabel: 'Status',
				name: prefix+'status',
				value: '',
				data: [{k:'',v:''}, {k:'submitted',v:'Submitted'}, {k:'pending',v:'Pending'}, {k:'selected',v:'Selected'}]
			}),
	
			this.simplyCombo({
				fieldLabel: 'Ad of the Week',
				name: prefix+'adoftheweek',
				value: '',
				data: [{k:'',v:'-'}, {k:'2014-14',v:'2014-14'}, {k:'2014-15',v:'2014-15'}, {k:'2014-16',v:'2014-16'}]
			}),
	
			{
				fieldLabel: 'QR Code',
				name: prefix+'qr',
			},
	
			{
				xtype: 'textareafield',
				fieldLabel: 'Comments',
				name: prefix+'comments'
			}

		];


		var submissionDetails = [

			{
				xtype: 'panel',
				autoscroll: true,
				cls: 'innen-content',
				border: false,
				
				fieldDefaults: {
					labelAlign: 'top',
					msgTarget: 'side',
					padding: 0
				},
					
				items:[
	
					{
						xtype: 'form',
						flex: 1,
						layout: 'anchor',
						defaultType: 'textfield',
						items: submissionDetailsLeft
					},
		
					{
						xtype: 'form',
						flex: 1,
						defaultType: 'textfield',
						items: submissionDetailsRight
					}
	
				]
			}

		];




		/******************************************************************* submission video BEGIN *************************************************************/
		var submissionVideoLeft = [

			{
				xtype: 'box',
				html: '<div class="video-container"><video preload="true" controls width="640" height="359" id="myvideo"><source src="/ffmpeg/video-cms.mp4#t=npt:7,12" type="video/mp4"></video></div>',
			},
	
			{
				xtype: 'box',
				html: '<div class="thumbs-container"><img src="/ffmpeg/video-cms.mp4_thumb1.jpg" /><img src="/ffmpeg/video-cms.mp4_thumb2.jpg" id="jump" /><img src="/ffmpeg/video-cms.mp4_thumb3.jpg" /><img src="/ffmpeg/video-cms.mp4_thumb4.jpg" /><img src="/ffmpeg/video-cms.mp4_thumb5.jpg" /><img src="/ffmpeg/video-cms.mp4_thumb6.jpg" /><img src="/ffmpeg/video-cms.mp4_thumb7.jpg" /><img src="/ffmpeg/video-cms.mp4_thumb8.jpg" /><img src="/ffmpeg/video-cms.mp4_thumb9.jpg" /><img src="/ffmpeg/video-cms.mp4_thumb10.jpg" /></div>'
			}

		];



		Ext.define('DataObject', {
			extend: 'Ext.data.Model',
			fields: [
			{name:'icon', 			text:'Icon', 			type: 'string', 		width: 32},
			{name:'type', 			text:'Type', 			type: 'string'},
			{name:'value',			text:'Value',		 	type: 'string'}
			]
		});


		var submissionVideoRight = xframe_pattern.getInstance().genGrid({
			region: 'center',
			border: false,

			collapseMode: 'mini',

			xstore: {
				model: 'DataObject',
				data: [
					{ 'icon': 'test1.jpg',  'text': 'Ad Agency', 'value': 'test' },
					{ 'icon': 'test2.jpg',  'text': 'Photographer', 'value': 'test' }
				],
			},

			columns: [

				{
					text: 'Icon',
					maxWidth: 75,
					dataIndex: 'icon'
				},
	
				{
					text: 'Type',
					dataIndex: 'type'
				},
	
				{
					text: 'value',
					dataIndex: 'value'
				},

			],

			listeners: {

				buffer: 1,
			}

		});

		var submissionVideoRight = [
			this.buildCreditForm(this.searchCombo({
				fieldLabel: 'Client',
				name: 'credit_client',
				cls: 'credit-client',
				minChars: 3,
				allowBlank: false,
				emptyText: 'Min 3 characters ...',
				flex: 1,
				searchScope: 'credit_client'
			})),
	
			this.buildCreditForm(this.searchCombo({
				fieldLabel: 'Ad Agency',
				name: 'credit_agency',
				cls: 'credit-agency',
				minChars: 3,
				allowBlank: false,
				emptyText: 'Min 3 characters ...',
				flex: 1,
				searchScope: 'credit_agency'
			})),
	
			this.buildCreditForm(this.searchCombo({
				fieldLabel: 'Creative Director',
				name: 'credit_creative_director',
				cls: 'credit-creative-director',
				minChars: 3,
				allowBlank: false,
				emptyText: 'Min 3 characters ...',
				flex: 1,
				searchScope: 'credit_creative'
			})),
	
			this.buildCreditForm(this.searchCombo({
				fieldLabel: 'Art Director',
				name: 'credit_art_director',
				cls: 'credit-art-director',
				minChars: 3,
				allowBlank: false,
				emptyText: 'Min 3 characters ...',
				flex: 1,
				searchScope: 'credit_art_director'
			})),
	
			this.buildCreditForm(this.searchCombo({
				fieldLabel: 'Copywriter',
				name: 'credit_copywriter',
				cls: 'credit-copywriter',
				minChars: 3,
				allowBlank: false,
				emptyText: 'Min 3 characters ...',
				flex: 1,
				searchScope: 'credit_copywriter'
			})),
	
			this.buildCreditForm(this.searchCombo({
				fieldLabel: 'Illustrator',
				name: 'credit_illustrator',
				cls: 'credit-illustrator',
				minChars: 3,
				allowBlank: false,
				emptyText: 'Min 3 characters ...',
				flex: 1,
				searchScope: 'credit_illustrator'
			})),
	
			this.buildCreditForm(this.searchCombo({
				fieldLabel: 'Digital Artist',
				name: 'credit_digital_artist',
				cls: 'credit-digital-artist',
				minChars: 3,
				allowBlank: false,
				emptyText: 'Min 3 characters ...',
				flex: 1,
				searchScope: 'credit_digital_artist'
			})),
	
			this.buildCreditForm(this.searchCombo({
				fieldLabel: 'Photographer',
				name: 'credit_photographer',
				cls: 'credit-photographer',
				minChars: 3,
				allowBlank: false,
				emptyText: 'Min 3 characters ...',
				flex: 1,
				searchScope: 'credit_photographer'
			})),
			{
				xtype: 'button',
				iconCls:'xf_grid_add',
				text: 'Add Credit',
				maxWidth: 150,
				listeners: {
					scope: this,
					click: function() {
	
						var fieldContainer = new Ext.form.FieldContainer({layout:'hbox'});
						var aux = this.simplyCombo({
							name: 'new_credit',
							value: 'Choose Credit',
							width: 150,
							data: [{k:'client',v:'Client'},{k:'agency',v:'Ad Agency'},{k:'creative_director',v:'Creative Director'},{k:'art_director',v:'Art Director'},{k:'copywriter',v:'Copywriter'},{k:'illustrator',v:'Illustrator'},{k:'digital_artist',v:'Digital Artist'},{k:'photographer',v:'Photographer'},],
						});
						var aux2 = { xtype: 'textfield', name: 'credit', margin: '0, 0, 0, 20', flex: 1};
	
						fieldContainer.add(aux, aux2);
	
						Ext.getCmp('creditformVideo').insert(0, fieldContainer);
					}
				}
			},
	
			{
				fieldLabel: 'Keywords',
				name: 'keywords',
				margin: '20, 0, 0 ,0'
			},
	
			{
				fieldLabel: 'HiRes',
				name: 'highres',
				value: "present",
				disabled: true,
			},

		];



		var submissionVideo = [

			{
				xtype: 'container',
				anchor: '100%',
				layout:'column',
				bodyStyle:'padding:5px 5px 0',
				items:[
	
					{
						xtype: 'container',
						columnWidth:.5,
						layout: 'anchor',
						defaults: {
							anchor: '96%'
						},
						defaultType: 'textfield',
						items: submissionVideoLeft
					},
		
					{
						xtype: 'container',
						columnWidth:.5,
						name: 'creditformVideo',
						layout: 'anchor',
						defaults: {
							anchor: '96%'
						},
						defaultType: 'textfield',
						items: submissionVideoRight
					}
	
				]
			}

		];

		/******************************************************************* submission video END *************************************************************/


		/******************************************************************* submission image BEGIN *************************************************************/
		var submissionImageLeft = [

			{
				xtype: 'box',
				html: '<img src="/ffmpeg/video-cms.jpg" />',
			}

		];


		var submissionImageRight = [

			this.buildCreditForm(this.searchCombo({
				fieldLabel: 'Client',
				name: 'credit_client',
				cls: 'credit-client',
				minChars: 3,
				allowBlank: false,
				emptyText: 'Min 3 characters ...',
				flex: 1,
				searchScope: 'credit_client'
			})),
	
			this.buildCreditForm(this.searchCombo({
				fieldLabel: 'Ad Agency',
				name: 'credit_agency',
				cls: 'credit-agency',
				minChars: 3,
				allowBlank: false,
				emptyText: 'Min 3 characters ...',
				flex: 1,
				searchScope: 'credit_agency'
			})),
	
			this.buildCreditForm(this.searchCombo({
				fieldLabel: 'Creative Director',
				name: 'credit_creative_director',
				cls: 'credit-creative-director',
				minChars: 3,
				allowBlank: false,
				emptyText: 'Min 3 characters ...',
				flex: 1,
				searchScope: 'credit_creative'
			})),
	
			this.buildCreditForm(this.searchCombo({
				fieldLabel: 'Art Director',
				name: 'credit_art_director',
				cls: 'credit-art-director',
				minChars: 3,
				allowBlank: false,
				emptyText: 'Min 3 characters ...',
				flex: 1,
				searchScope: 'credit_art_director'
			})),
	
			this.buildCreditForm(this.searchCombo({
				fieldLabel: 'Copywriter',
				name: 'credit_copywriter',
				cls: 'credit-copywriter',
				minChars: 3,
				allowBlank: false,
				emptyText: 'Min 3 characters ...',
				flex: 1,
				searchScope: 'credit_copywriter'
			})),
	
			this.buildCreditForm(this.searchCombo({
				fieldLabel: 'Illustrator',
				name: 'credit_illustrator',
				cls: 'credit-illustrator',
				minChars: 3,
				allowBlank: false,
				emptyText: 'Min 3 characters ...',
				flex: 1,
				searchScope: 'credit_illustrator'
			})),
	
			this.buildCreditForm(this.searchCombo({
				fieldLabel: 'Digital Artist',
				name: 'credit_digital_artist',
				cls: 'credit-digital-artist',
				minChars: 3,
				allowBlank: false,
				emptyText: 'Min 3 characters ...',
				flex: 1,
				searchScope: 'credit_digital_artist'
			})),
	
			this.buildCreditForm(this.searchCombo({
				fieldLabel: 'Photographer',
				name: 'credit_photographer',
				cls: 'credit-photographer',
				minChars: 3,
				allowBlank: false,
				emptyText: 'Min 3 characters ...',
				flex: 1,
				searchScope: 'credit_photographer'
			})),
			{
				xtype: 'button',
				iconCls:'xf_grid_add',
				text: 'Add Credit',
				maxWidth: 150,
				listeners: {
					scope: this,
					click: function() {
	
						var fieldContainer = new Ext.form.FieldContainer({layout:'hbox'});
						var aux = this.simplyCombo({
							name: 'new_credit',
							value: 'Choose Credit',
							width: 150,
							data: [{k:'client',v:'Client'},{k:'agency',v:'Ad Agency'},{k:'creative_director',v:'Creative Director'},{k:'art_director',v:'Art Director'},{k:'copywriter',v:'Copywriter'},{k:'illustrator',v:'Illustrator'},{k:'digital_artist',v:'Digital Artist'},{k:'photographer',v:'Photographer'},],
						});
						var aux2 = { xtype: 'textfield', name: 'credit', margin: '0, 0, 0, 20', flex: 1};
						fieldContainer.add(aux, aux2);
						Ext.getCmp('creditformImage').insert(0, fieldContainer);
	
					}
				}
			},
	
			{
				fieldLabel: 'Keywords',
				name: 'keywords',
				margin: '20, 0, 0 ,0'
			},
	
			{
				fieldLabel: 'HiRes',
				name: 'highres',
				value: "present",
				disabled: true,
			}

		];


		var submissionImage = [

		{
			xtype: 'container',
			layout:'column',
			bodyStyle:'padding:5px 5px 0',
			items:[

			{
				xtype: 'container',
				columnWidth:.5,
				layout: 'anchor',
				defaults: {
					anchor: '96%'
				},
				defaultType: 'textfield',
				items: submissionImageLeft
			},

			{
				xtype: 'container',
				columnWidth:.5,
				name: 'creditformImage',
				layout: 'anchor',
				defaults: {
					anchor: '96%'
				},
				defaultType: 'textfield',
				items: submissionImageRight
			}

			]
		}

		];

		/******************************************************************* submission image END *************************************************************/

		var guiSub = Ext.create('Ext.panel.Panel', {
			border: false,
			layout: 'border',

			fieldDefaults: {
				labelAlign: 'top',
				msgTarget: 'side'
			},
			defaults: {
				border: false,
				margin: '0 0 0 0',
			},

			items: submissionDetails,

				/* {
					// title: 'Submission Detail',
					items: submissionDetails
				}/*,
	
				{
					title: 'Submission Video',
					items: submissionVideo,
					border: false,
				},
	
				{
					title: 'Submission Image',
					items: submissionImage
				}, */

			listeners: {
				scope: this,
				buffer: 1,
				afterrender:function() {

					this.setVideoJumps();
				},
			}
		});

		var gui = Ext.create('Ext.tab.Panel', {

			border: false,
			autoScroll: true,
			title: 'Submission ID: '+id,
			bodyStyle:'padding: 0',
			tbar: [

			{
				text: 'Save',
				iconCls: 'xf_save'
			},

			{
				text: 'Close',
				iconCls: 'xf_abort'

			},

			{
				text: 'Print',
				iconCls:'xf_printer',
			},

			{
				text: 'Notify Submitter',
				iconCls:'xf_mail',
				handler: function(){
					scope: this,
					this.notifySubmitter
				}
			},

			{
				text: 'Previous',
				iconCls:'xf_arrow_left',
				handler: function(){
					scope: this,
					this.switchSubmission(0, 'prev')
				}

			},

			{
				text: 'Next',
				iconCls:'xf_arrow_right',
				handler: function(){
					scope: this,
					this.switchSubmission(0, 'next')
				}
			}

			],

			fieldDefaults: {
				labelAlign: 'top',
				msgTarget: 'side'
			},

			items:[

			{
				title: 'Details',
				items: [guiSub],
				autoScroll: true,
			},

			{
				title: 'Submitter 2 Backend',
				items: [submitterBackend]
			},

			{
				title: 'Original submitted Data',

			},

			{
				title: 'Logs',
				items: [

				xframe_pattern.getInstance().genGrid({
					region:'center',
					forceFit:true,
					border:false,
					split: true,
					collapseMode: 'mini',

					button_del:true,
					button_add:true,
					search: true,
					pager: true,
					xstore: {
						load: 	this.getAjaxPath('e_submissionOfTheDayX/load?dayx='),
						pid: 	'SubmissionID',
						fields: [
						{name:'createdOn',		text:'Created on', 		type: 'timestamp'},
						{name:'createdBy',		text:'Created by', 		type: 'string'},
						{name:'action',			text:'Action', 			type: 'string'},
						{name:'oldValue',		text:'Old value', 		type: 'string'},
						{name:'newValue',		text:'New Value', 		type: 'string'},
						],
					},
					listeners: {
						scope: this,
						buffer: 1,
						itemdblclick: function(g,record) {
							// this.showSubmission(record.data.SubmissionID);
						}
					}
				}),

				]
			}

			]

		});

		this.showContent(gui);
	},




	switchSubmission: function(submissionId, direction) {
		/* TODO fuer prev / next button */
	},

	printSubmission: function(submissionId) {
		// TODO
	},

	saveSubmission: function() {
		// TODO
	},

	closeSubmission: function() {
		// TODO
	},

	sortNewCredit: function() {
		/* TODO einsortieren bei neuem credit */
	},

	notifySubmitter: function() {
		// TODO
	},

	closeAllTabs: function(butNot) {
		// TODO, alle tabs schliesen ausser...
	}
	
	
	
}
